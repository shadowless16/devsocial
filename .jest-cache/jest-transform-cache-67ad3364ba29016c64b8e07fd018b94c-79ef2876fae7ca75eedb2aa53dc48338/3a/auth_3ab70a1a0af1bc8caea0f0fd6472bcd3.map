{"file":"C:\\Users\\akdav\\Downloads\\devsocial\\lib\\auth.ts","mappings":"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","names":[],"sources":["C:\\Users\\akdav\\Downloads\\devsocial\\lib\\auth.ts"],"sourcesContent":["// middleware/auth.ts\nimport NextAuth, { AuthOptions, Session, User, getServerSession } from \"next-auth\";\nimport { JWT } from \"next-auth/jwt\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport { MongoDBAdapter } from \"@auth/mongodb-adapter\";\nimport { MongoClient } from \"mongodb\";\nimport bcrypt from \"bcryptjs\";\nimport connectDB from \"@/lib/db\";\nimport UserModel from \"@/models/User\";\nimport { NextResponse, type NextRequest } from \"next/server\";\nimport { SessionCacheService } from \"@/lib/session-cache\";\n \ndeclare module \"next-auth\" {\n  interface User {\n    id: string;\n    email: string;\n    username: string;\n    role: string;\n  }\n  interface Session {\n    user: {\n      id: string;\n      username: string;\n      email: string;\n      role: string;\n    };\n  }\n  interface AdapterUser {\n    id: string;\n    email: string;\n    username: string;\n    role: string;\n  }\n}\n\nexport const authOptions: AuthOptions = {\n  providers: [\n    CredentialsProvider({\n      name: \"Credentials\",\n      credentials: {\n        usernameOrEmail: { label: \"Username or Email\", type: \"text\" },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        await connectDB();\n        const user = await UserModel.findOne({\n          $or: [{ email: credentials?.usernameOrEmail }, { username: credentials?.usernameOrEmail }],\n        });\n        if (!user || !credentials?.password) {\n          throw new Error(\"Invalid credentials\");\n        }\n        const isValid = await bcrypt.compare(credentials.password, user.password);\n        if (!isValid) {\n          throw new Error(\"Invalid credentials\");\n        }\n        return {\n          id: user._id.toString(),\n          email: user.email,\n          username: user.username,\n          role: user.role,\n        };\n      },\n    }),\n  ],\n\n  session: {\n    strategy: \"jwt\" as const,\n    maxAge: 7 * 24 * 60 * 60, // 7 days\n    updateAge: 24 * 60 * 60, // Update session only once per day\n  },\n  jwt: {\n    maxAge: 7 * 24 * 60 * 60, // 7 days\n  },\n  pages: {\n    signIn: \"/auth/login\",\n    error: \"/auth/error\",\n  },\n  callbacks: {\n    async redirect({ url, baseUrl }) {\n      // Prevent redirect to API endpoints\n      if (url.includes('/api/')) return baseUrl + \"/home\"\n      // Allows relative callback URLs\n      if (url.startsWith(\"/\")) return `${baseUrl}${url}`\n      // Allows callback URLs on the same origin\n      else if (new URL(url).origin === baseUrl) return url\n      return baseUrl + \"/home\"\n    },\n    async jwt({ token, user }: { token: JWT; user?: User }) {\n      if (user) {\n        token.id = user.id;\n        token.role = user.role;\n        token.username = user.username;\n      }\n      return token;\n    },\n    async session({ session, token }: { session: Session; token: JWT }) {\n      if (session.user) {\n        session.user.id = token.id as string;\n        session.user.role = token.role as string;\n        session.user.username = token.username as string;\n        \n        // Cache session for faster lookups\n        const sessionId = `session_${token.id}`;\n        SessionCacheService.set(sessionId, {\n          user: session.user,\n          expires: session.expires || new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString()\n        });\n      }\n      return session;\n    },\n  },\n  secret: process.env.NEXTAUTH_SECRET,\n  debug: process.env.NODE_ENV === 'development',\n};\n\nexport interface AuthenticatedRequest extends NextRequest {\n  user: {\n    id: string;\n    username: string;\n    email: string;\n    role: string;\n  };\n}\n\nexport function withAuth(handler: (req: AuthenticatedRequest) => Promise<NextResponse>) {\n  return async (req: NextRequest) => {\n    console.log(`[Middleware] Protecting route: ${req.nextUrl.pathname}`);\n    const session = await getServerSession(authOptions);\n    if (!session || !session.user) {\n      console.log(\"[Middleware] Failed: No session found.\");\n      return NextResponse.json({ success: false, message: \"Authentication required.\" }, { status: 401 });\n    }\n\n    const authenticatedReq = req as AuthenticatedRequest;\n    authenticatedReq.user = {\n      id: session.user.id,\n      username: session.user.username,\n      email: session.user.email || \"\",\n      role: session.user.role,\n    };\n\n    console.log(`[Middleware] Success: User ${session.user.username} authenticated.`);\n    return handler(authenticatedReq);\n  };\n}\n\n// Token payload interface\nexport interface TokenPayload {\n  userId: string;\n  email: string;\n  role: string;\n}\n\n// Auth service for JWT token management and email services\nexport class AuthService {\n  private static JWT_SECRET = process.env.JWT_SECRET || \"your-fallback-secret\";\n  private static JWT_EXPIRES_IN = \"15m\"; // Access token expires in 15 minutes\n  private static REFRESH_TOKEN_EXPIRES_IN = \"7d\"; // Refresh token expires in 7 days\n\n  // Generate both access and refresh tokens\n  static generateTokens(payload: TokenPayload) {\n    const jwt = require('jsonwebtoken');\n    \n    const accessToken = jwt.sign(payload, this.JWT_SECRET, {\n      expiresIn: this.JWT_EXPIRES_IN,\n    });\n\n    const refreshToken = jwt.sign(payload, this.JWT_SECRET, {\n      expiresIn: this.REFRESH_TOKEN_EXPIRES_IN,\n    });\n\n    return { accessToken, refreshToken };\n  }\n\n  // Verify JWT token\n  static verifyToken(token: string) {\n    const jwt = require('jsonwebtoken');\n    try {\n      return jwt.verify(token, this.JWT_SECRET) as TokenPayload;\n    } catch (error) {\n      throw new Error('Invalid or expired token');\n    }\n  }\n\n  // Generate password reset token\n  static generateResetToken() {\n    const crypto = require('crypto');\n    return crypto.randomBytes(32).toString('hex');\n  }\n\n  // Send password reset email (placeholder implementation)\n  static async sendPasswordResetEmail(email: string, resetToken: string, username: string) {\n    // In a real application, you would integrate with an email service like SendGrid, Nodemailer, etc.\n    console.log(`[AuthService] Password reset email would be sent to ${email}`);\n    console.log(`[AuthService] Reset token: ${resetToken}`);\n    console.log(`[AuthService] Username: ${username}`);\n    \n    // For now, we'll just log the reset link\n    const resetLink = `${process.env.NEXT_PUBLIC_APP_URL}/auth/reset-password?token=${resetToken}`;\n    console.log(`[AuthService] Reset link: ${resetLink}`);\n    \n    // TODO: Implement actual email sending\n    // Example with nodemailer:\n    // const transporter = createTransporter();\n    // await transporter.sendMail({\n    //   to: email,\n    //   subject: 'Password Reset Request',\n    //   html: `<p>Hi ${username}, click <a href=\"${resetLink}\">here</a> to reset your password.</p>`\n    // });\n    \n    return true;\n  }\n}\n"],"version":3}