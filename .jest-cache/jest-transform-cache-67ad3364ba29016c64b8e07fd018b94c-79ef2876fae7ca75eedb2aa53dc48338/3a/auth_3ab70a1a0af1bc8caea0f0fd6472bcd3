e94184e2f7ef8bd24e1d3c11af24d6cf
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthService = exports.authOptions = void 0;
exports.withAuth = withAuth;
// middleware/auth.ts
const next_auth_1 = require("next-auth");
const credentials_1 = __importDefault(require("next-auth/providers/credentials"));
const bcryptjs_1 = __importDefault(require("bcryptjs"));
const db_1 = __importDefault(require("@/lib/db"));
const User_1 = __importDefault(require("@/models/User"));
const server_1 = require("next/server");
const session_cache_1 = require("@/lib/session-cache");
exports.authOptions = {
    providers: [
        (0, credentials_1.default)({
            name: "Credentials",
            credentials: {
                usernameOrEmail: { label: "Username or Email", type: "text" },
                password: { label: "Password", type: "password" },
            },
            authorize(credentials) {
                return __awaiter(this, void 0, void 0, function* () {
                    yield (0, db_1.default)();
                    const user = yield User_1.default.findOne({
                        $or: [{ email: credentials === null || credentials === void 0 ? void 0 : credentials.usernameOrEmail }, { username: credentials === null || credentials === void 0 ? void 0 : credentials.usernameOrEmail }],
                    });
                    if (!user || !(credentials === null || credentials === void 0 ? void 0 : credentials.password)) {
                        throw new Error("Invalid credentials");
                    }
                    const isValid = yield bcryptjs_1.default.compare(credentials.password, user.password);
                    if (!isValid) {
                        throw new Error("Invalid credentials");
                    }
                    return {
                        id: user._id.toString(),
                        email: user.email,
                        username: user.username,
                        role: user.role,
                    };
                });
            },
        }),
    ],
    session: {
        strategy: "jwt",
        maxAge: 7 * 24 * 60 * 60, // 7 days
        updateAge: 24 * 60 * 60, // Update session only once per day
    },
    jwt: {
        maxAge: 7 * 24 * 60 * 60, // 7 days
    },
    pages: {
        signIn: "/auth/login",
        error: "/auth/error",
    },
    callbacks: {
        redirect(_a) {
            return __awaiter(this, arguments, void 0, function* ({ url, baseUrl }) {
                // Prevent redirect to API endpoints
                if (url.includes('/api/'))
                    return baseUrl + "/home";
                // Allows relative callback URLs
                if (url.startsWith("/"))
                    return `${baseUrl}${url}`;
                // Allows callback URLs on the same origin
                else if (new URL(url).origin === baseUrl)
                    return url;
                return baseUrl + "/home";
            });
        },
        jwt(_a) {
            return __awaiter(this, arguments, void 0, function* ({ token, user }) {
                if (user) {
                    token.id = user.id;
                    token.role = user.role;
                    token.username = user.username;
                }
                return token;
            });
        },
        session(_a) {
            return __awaiter(this, arguments, void 0, function* ({ session, token }) {
                if (session.user) {
                    session.user.id = token.id;
                    session.user.role = token.role;
                    session.user.username = token.username;
                    // Cache session for faster lookups
                    const sessionId = `session_${token.id}`;
                    session_cache_1.SessionCacheService.set(sessionId, {
                        user: session.user,
                        expires: session.expires || new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString()
                    });
                }
                return session;
            });
        },
    },
    secret: process.env.NEXTAUTH_SECRET,
    debug: process.env.NODE_ENV === 'development',
};
function withAuth(handler) {
    return (req) => __awaiter(this, void 0, void 0, function* () {
        console.log(`[Middleware] Protecting route: ${req.nextUrl.pathname}`);
        const session = yield (0, next_auth_1.getServerSession)(exports.authOptions);
        if (!session || !session.user) {
            console.log("[Middleware] Failed: No session found.");
            return server_1.NextResponse.json({ success: false, message: "Authentication required." }, { status: 401 });
        }
        const authenticatedReq = req;
        authenticatedReq.user = {
            id: session.user.id,
            username: session.user.username,
            email: session.user.email || "",
            role: session.user.role,
        };
        console.log(`[Middleware] Success: User ${session.user.username} authenticated.`);
        return handler(authenticatedReq);
    });
}
// Auth service for JWT token management and email services
class AuthService {
    // Generate both access and refresh tokens
    static generateTokens(payload) {
        const jwt = require('jsonwebtoken');
        const accessToken = jwt.sign(payload, this.JWT_SECRET, {
            expiresIn: this.JWT_EXPIRES_IN,
        });
        const refreshToken = jwt.sign(payload, this.JWT_SECRET, {
            expiresIn: this.REFRESH_TOKEN_EXPIRES_IN,
        });
        return { accessToken, refreshToken };
    }
    // Verify JWT token
    static verifyToken(token) {
        const jwt = require('jsonwebtoken');
        try {
            return jwt.verify(token, this.JWT_SECRET);
        }
        catch (error) {
            throw new Error('Invalid or expired token');
        }
    }
    // Generate password reset token
    static generateResetToken() {
        const crypto = require('crypto');
        return crypto.randomBytes(32).toString('hex');
    }
    // Send password reset email (placeholder implementation)
    static sendPasswordResetEmail(email, resetToken, username) {
        return __awaiter(this, void 0, void 0, function* () {
            // In a real application, you would integrate with an email service like SendGrid, Nodemailer, etc.
            console.log(`[AuthService] Password reset email would be sent to ${email}`);
            console.log(`[AuthService] Reset token: ${resetToken}`);
            console.log(`[AuthService] Username: ${username}`);
            // For now, we'll just log the reset link
            const resetLink = `${process.env.NEXT_PUBLIC_APP_URL}/auth/reset-password?token=${resetToken}`;
            console.log(`[AuthService] Reset link: ${resetLink}`);
            // TODO: Implement actual email sending
            // Example with nodemailer:
            // const transporter = createTransporter();
            // await transporter.sendMail({
            //   to: email,
            //   subject: 'Password Reset Request',
            //   html: `<p>Hi ${username}, click <a href="${resetLink}">here</a> to reset your password.</p>`
            // });
            return true;
        });
    }
}
exports.AuthService = AuthService;
AuthService.JWT_SECRET = process.env.JWT_SECRET || "your-fallback-secret";
AuthService.JWT_EXPIRES_IN = "15m"; // Access token expires in 15 minutes
AuthService.REFRESH_TOKEN_EXPIRES_IN = "7d"; // Refresh token expires in 7 days
//# sourceMappingURL=data:application/json;charset=utf-8;base64,