8e9b88998ce0b319373c3d46b4c3d06c
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// Mock next/server modules
jest.mock('next/server', () => {
    var _a;
    return ({
        NextRequest: class NextRequest extends Request {
            constructor(url, init) {
                super(url, init);
                this.nextUrl = { pathname: '/', searchParams: new URLSearchParams() };
                this.cookies = { get: jest.fn(), set: jest.fn() };
                this.headers = new Map();
            }
        },
        NextResponse: (_a = class NextResponse extends Response {
            },
            _a.json = (data, init) => new Response(JSON.stringify(data), Object.assign(Object.assign({}, init), { headers: Object.assign({ 'content-type': 'application/json' }, init === null || init === void 0 ? void 0 : init.headers) })),
            _a)
    });
});
// Jest setup file
require("dotenv/config");
// Polyfill TextEncoder/TextDecoder for Node.js environment
if (typeof global.TextEncoder === 'undefined') {
    const { TextEncoder, TextDecoder } = require('util');
    global.TextEncoder = TextEncoder;
    global.TextDecoder = TextDecoder;
}
// Polyfill Web APIs for Next.js
if (typeof global.Request === 'undefined') {
    global.Request = class Request {
        constructor(url, init) {
            this.url = url;
            this.init = init;
            this.headers = new Map();
            this.method = 'GET';
            this.body = null;
            this.json = () => __awaiter(this, void 0, void 0, function* () { return ({}); });
            this.text = () => __awaiter(this, void 0, void 0, function* () { return ''; });
        }
    };
}
if (typeof global.Response === 'undefined') {
    global.Response = class Response {
        constructor(body, init) {
            this.body = body;
            this.init = init;
            this.headers = new Map();
            this.status = 200;
            this.statusText = 'OK';
            this.ok = true;
            this.json = () => __awaiter(this, void 0, void 0, function* () { return this.body; });
            this.text = () => __awaiter(this, void 0, void 0, function* () { return String(this.body || ''); });
        }
    };
}
if (typeof global.Headers === 'undefined') {
    global.Headers = Map;
}
if (typeof global.fetch === 'undefined') {
    global.fetch = jest.fn(() => Promise.resolve(new Response('{}', { status: 200 })));
}
// Set reasonable timeout for tests
jest.setTimeout(30000);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxha2RhdlxcRG93bmxvYWRzXFxkZXZzb2NpYWxcXGplc3Quc2V0dXAudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUE0Q0EsMkJBQTJCO0FBQzNCLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRTs7SUFBQyxPQUFBLENBQUM7UUFDOUIsV0FBVyxFQUFFLE1BQU0sV0FBWSxTQUFRLE9BQU87WUFDNUMsWUFBWSxHQUFXLEVBQUUsSUFBVTtnQkFDakMsS0FBSyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQTtnQkFFbEIsWUFBTyxHQUFHLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxZQUFZLEVBQUUsSUFBSSxlQUFlLEVBQUUsRUFBRSxDQUFBO2dCQUNoRSxZQUFPLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQTtnQkFDNUMsWUFBTyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7WUFIbkIsQ0FBQztTQUlGO1FBQ0QsWUFBWSxRQUFFLE1BQU0sWUFBYSxTQUFRLFFBQVE7YUFLaEQ7WUFKUSxPQUFJLEdBQUcsQ0FBQyxJQUFTLEVBQUUsSUFBVSxFQUFFLEVBQUUsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxrQ0FDckUsSUFBSSxLQUNQLE9BQU8sa0JBQUksY0FBYyxFQUFFLGtCQUFrQixJQUFLLElBQUksYUFBSixJQUFJLHVCQUFKLElBQUksQ0FBRSxPQUFPLEtBQy9EO2VBQ0g7S0FDRixDQUFDLENBQUE7Q0FBQSxDQUFDLENBQUE7QUE1REgsa0JBQWtCO0FBQ2xCLHlCQUFzQjtBQUV0QiwyREFBMkQ7QUFDM0QsSUFBSSxPQUFPLE1BQU0sQ0FBQyxXQUFXLEtBQUssV0FBVyxFQUFFLENBQUM7SUFDOUMsTUFBTSxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDcEQsTUFBTSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUE7SUFDaEMsTUFBTSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUE7QUFDbEMsQ0FBQztBQUVELGdDQUFnQztBQUNoQyxJQUFJLE9BQU8sTUFBTSxDQUFDLE9BQU8sS0FBSyxXQUFXLEVBQUUsQ0FBQztJQUMxQyxNQUFNLENBQUMsT0FBTyxHQUFHLE1BQU0sT0FBTztRQUM1QixZQUFtQixHQUFXLEVBQVMsSUFBVTtZQUE5QixRQUFHLEdBQUgsR0FBRyxDQUFRO1lBQVMsU0FBSSxHQUFKLElBQUksQ0FBTTtZQUNqRCxZQUFPLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQTtZQUNuQixXQUFNLEdBQUcsS0FBSyxDQUFBO1lBQ2QsU0FBSSxHQUFHLElBQUksQ0FBQTtZQUNYLFNBQUksR0FBRyxHQUFTLEVBQUUsZ0RBQUMsT0FBQSxDQUFDLEVBQUUsQ0FBQyxDQUFBLEdBQUEsQ0FBQTtZQUN2QixTQUFJLEdBQUcsR0FBUyxFQUFFLGdEQUFDLE9BQUEsRUFBRSxDQUFBLEdBQUEsQ0FBQTtRQUwrQixDQUFDO0tBTS9DLENBQUE7QUFDVixDQUFDO0FBRUQsSUFBSSxPQUFPLE1BQU0sQ0FBQyxRQUFRLEtBQUssV0FBVyxFQUFFLENBQUM7SUFDM0MsTUFBTSxDQUFDLFFBQVEsR0FBRyxNQUFNLFFBQVE7UUFDOUIsWUFBbUIsSUFBVSxFQUFTLElBQVU7WUFBN0IsU0FBSSxHQUFKLElBQUksQ0FBTTtZQUFTLFNBQUksR0FBSixJQUFJLENBQU07WUFDaEQsWUFBTyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUE7WUFDbkIsV0FBTSxHQUFHLEdBQUcsQ0FBQTtZQUNaLGVBQVUsR0FBRyxJQUFJLENBQUE7WUFDakIsT0FBRSxHQUFHLElBQUksQ0FBQTtZQUNULFNBQUksR0FBRyxHQUFTLEVBQUUsZ0RBQUMsT0FBQSxJQUFJLENBQUMsSUFBSSxDQUFBLEdBQUEsQ0FBQTtZQUM1QixTQUFJLEdBQUcsR0FBUyxFQUFFLGdEQUFDLE9BQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUEsR0FBQSxDQUFBO1FBTlMsQ0FBQztLQU85QyxDQUFBO0FBQ1YsQ0FBQztBQUVELElBQUksT0FBTyxNQUFNLENBQUMsT0FBTyxLQUFLLFdBQVcsRUFBRSxDQUFDO0lBQzFDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsR0FBVSxDQUFBO0FBQzdCLENBQUM7QUFFRCxJQUFJLE9BQU8sTUFBTSxDQUFDLEtBQUssS0FBSyxXQUFXLEVBQUUsQ0FBQztJQUN4QyxNQUFNLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFRLENBQUE7QUFDM0YsQ0FBQztBQXNCRCxtQ0FBbUM7QUFDbkMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGFrZGF2XFxEb3dubG9hZHNcXGRldnNvY2lhbFxcamVzdC5zZXR1cC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBKZXN0IHNldHVwIGZpbGVcbmltcG9ydCAnZG90ZW52L2NvbmZpZydcblxuLy8gUG9seWZpbGwgVGV4dEVuY29kZXIvVGV4dERlY29kZXIgZm9yIE5vZGUuanMgZW52aXJvbm1lbnRcbmlmICh0eXBlb2YgZ2xvYmFsLlRleHRFbmNvZGVyID09PSAndW5kZWZpbmVkJykge1xuICBjb25zdCB7IFRleHRFbmNvZGVyLCBUZXh0RGVjb2RlciB9ID0gcmVxdWlyZSgndXRpbCcpXG4gIGdsb2JhbC5UZXh0RW5jb2RlciA9IFRleHRFbmNvZGVyXG4gIGdsb2JhbC5UZXh0RGVjb2RlciA9IFRleHREZWNvZGVyXG59XG5cbi8vIFBvbHlmaWxsIFdlYiBBUElzIGZvciBOZXh0LmpzXG5pZiAodHlwZW9mIGdsb2JhbC5SZXF1ZXN0ID09PSAndW5kZWZpbmVkJykge1xuICBnbG9iYWwuUmVxdWVzdCA9IGNsYXNzIFJlcXVlc3Qge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB1cmw6IHN0cmluZywgcHVibGljIGluaXQ/OiBhbnkpIHt9XG4gICAgaGVhZGVycyA9IG5ldyBNYXAoKVxuICAgIG1ldGhvZCA9ICdHRVQnXG4gICAgYm9keSA9IG51bGxcbiAgICBqc29uID0gYXN5bmMgKCkgPT4gKHt9KVxuICAgIHRleHQgPSBhc3luYyAoKSA9PiAnJ1xuICB9IGFzIGFueVxufVxuXG5pZiAodHlwZW9mIGdsb2JhbC5SZXNwb25zZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgZ2xvYmFsLlJlc3BvbnNlID0gY2xhc3MgUmVzcG9uc2Uge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBib2R5PzogYW55LCBwdWJsaWMgaW5pdD86IGFueSkge31cbiAgICBoZWFkZXJzID0gbmV3IE1hcCgpXG4gICAgc3RhdHVzID0gMjAwXG4gICAgc3RhdHVzVGV4dCA9ICdPSydcbiAgICBvayA9IHRydWVcbiAgICBqc29uID0gYXN5bmMgKCkgPT4gdGhpcy5ib2R5XG4gICAgdGV4dCA9IGFzeW5jICgpID0+IFN0cmluZyh0aGlzLmJvZHkgfHwgJycpXG4gIH0gYXMgYW55XG59XG5cbmlmICh0eXBlb2YgZ2xvYmFsLkhlYWRlcnMgPT09ICd1bmRlZmluZWQnKSB7XG4gIGdsb2JhbC5IZWFkZXJzID0gTWFwIGFzIGFueVxufVxuXG5pZiAodHlwZW9mIGdsb2JhbC5mZXRjaCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgZ2xvYmFsLmZldGNoID0gamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUobmV3IFJlc3BvbnNlKCd7fScsIHsgc3RhdHVzOiAyMDAgfSkpKSBhcyBhbnlcbn1cblxuXG5cbi8vIE1vY2sgbmV4dC9zZXJ2ZXIgbW9kdWxlc1xuamVzdC5tb2NrKCduZXh0L3NlcnZlcicsICgpID0+ICh7XG4gIE5leHRSZXF1ZXN0OiBjbGFzcyBOZXh0UmVxdWVzdCBleHRlbmRzIFJlcXVlc3Qge1xuICAgIGNvbnN0cnVjdG9yKHVybDogc3RyaW5nLCBpbml0PzogYW55KSB7XG4gICAgICBzdXBlcih1cmwsIGluaXQpXG4gICAgfVxuICAgIG5leHRVcmwgPSB7IHBhdGhuYW1lOiAnLycsIHNlYXJjaFBhcmFtczogbmV3IFVSTFNlYXJjaFBhcmFtcygpIH1cbiAgICBjb29raWVzID0geyBnZXQ6IGplc3QuZm4oKSwgc2V0OiBqZXN0LmZuKCkgfVxuICAgIGhlYWRlcnMgPSBuZXcgTWFwKClcbiAgfSxcbiAgTmV4dFJlc3BvbnNlOiBjbGFzcyBOZXh0UmVzcG9uc2UgZXh0ZW5kcyBSZXNwb25zZSB7XG4gICAgc3RhdGljIGpzb24gPSAoZGF0YTogYW55LCBpbml0PzogYW55KSA9PiBuZXcgUmVzcG9uc2UoSlNPTi5zdHJpbmdpZnkoZGF0YSksIHtcbiAgICAgIC4uLmluaXQsXG4gICAgICBoZWFkZXJzOiB7ICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsIC4uLmluaXQ/LmhlYWRlcnMgfVxuICAgIH0pXG4gIH1cbn0pKVxuXG4vLyBTZXQgcmVhc29uYWJsZSB0aW1lb3V0IGZvciB0ZXN0c1xuamVzdC5zZXRUaW1lb3V0KDMwMDAwKSJdLCJ2ZXJzaW9uIjozfQ==