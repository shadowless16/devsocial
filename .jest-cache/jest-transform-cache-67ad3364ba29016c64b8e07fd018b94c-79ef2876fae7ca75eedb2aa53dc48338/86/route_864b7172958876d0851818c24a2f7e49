d283e2fe7b50fb5a16662517e3b3e233
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dynamic = void 0;
exports.POST = POST;
const server_1 = require("next/server");
const bcryptjs_1 = __importDefault(require("bcryptjs"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const db_1 = __importDefault(require("@/lib/db"));
const User_1 = __importDefault(require("@/models/User"));
const Follow_1 = __importDefault(require("@/models/Follow"));
const validation_1 = require("@/utils/validation");
const response_1 = require("@/utils/response");
const awardXP_1 = require("@/utils/awardXP");
const referral_system_fixed_1 = require("@/utils/referral-system-fixed");
const avatar_generator_1 = require("@/utils/avatar-generator");
const JWT_SECRET = process.env.JWT_SECRET;
exports.dynamic = 'force-dynamic';
function POST(request) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield (0, db_1.default)();
            const body = yield request.json();
            console.log('Signup request body:', JSON.stringify(body, null, 2));
            const { referralCode } = body;
            // Validate input
            const validation = validation_1.signupSchema.safeParse(body);
            if (!validation.success) {
                console.log('Validation failed:', validation.error.format());
                return (0, response_1.validationErrorResponse)(validation.error.format());
            }
            const { username, email, password, firstName, lastName, birthMonth, birthDay, affiliation } = validation.data;
            // Check if user already exists
            const existingUser = yield User_1.default.findOne({
                $or: [{ email }, { username }],
            });
            if (existingUser) {
                if (existingUser.email === email) {
                    return (0, response_1.errorResponse)("Email already exists", 400);
                }
                if (existingUser.username === username) {
                    return (0, response_1.errorResponse)("Username already exists", 400);
                }
            }
            // Hash password
            const saltRounds = 12;
            const hashedPassword = yield bcryptjs_1.default.hash(password, saltRounds);
            // Generate initial avatar (will be updated during onboarding)
            const initialAvatar = (0, avatar_generator_1.generateAvatarFromUsername)(username);
            // Create user
            const user = yield User_1.default.create({
                username,
                email,
                password: hashedPassword,
                firstName,
                lastName,
                birthMonth,
                birthDay,
                affiliation: affiliation || "Other",
                avatar: initialAvatar,
                points: 10, // Starting XP
                badges: ["newcomer"], // Starting badge
            });
            // Award signup XP
            yield (0, awardXP_1.awardXP)(user._id.toString(), "daily_login");
            // Auto-follow AkDavid (platform creator)
            try {
                const akDavid = yield User_1.default.findOne({ username: "AkDavid" });
                if (akDavid) {
                    yield Follow_1.default.create({
                        follower: user._id,
                        following: akDavid._id,
                    });
                }
            }
            catch (error) {
                console.error("Auto-follow AkDavid error:", error);
            }
            // Handle referral if code was provided
            if (referralCode) {
                try {
                    const success = yield referral_system_fixed_1.ReferralSystemFixed.processReferralFromSignup(referralCode, user._id.toString());
                    if (success) {
                        console.log(`Referral processed successfully for user ${user.username} with code ${referralCode}`);
                    }
                }
                catch (error) {
                    console.error("Referral creation error:", error);
                    // Don't fail the signup if referral fails
                }
            }
            // Generate JWT
            const token = jsonwebtoken_1.default.sign({ userId: user._id }, JWT_SECRET, { expiresIn: "7d" });
            // Return user data (excluding password)
            const userData = {
                id: user._id,
                username: user.username,
                email: user.email,
                firstName: user.firstName,
                lastName: user.lastName,
                birthMonth: user.birthMonth,
                birthDay: user.birthDay,
                bio: user.bio,
                affiliation: user.affiliation,
                avatar: user.avatar,
                role: user.role,
                points: user.points,
                level: user.level,
                badges: user.badges,
                createdAt: user.createdAt,
            };
            return server_1.NextResponse.json((0, response_1.successResponse)({
                token,
                user: userData,
            }), { status: 201 });
        }
        catch (error) {
            console.error("Signup error:", error);
            return (0, response_1.errorResponse)("Internal server error", 500);
        }
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,