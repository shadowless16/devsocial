{"file":"C:\\Users\\akdav\\Downloads\\devsocial\\app\\api\\auth\\signup\\route.ts","mappings":"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","names":[],"sources":["C:\\Users\\akdav\\Downloads\\devsocial\\app\\api\\auth\\signup\\route.ts"],"sourcesContent":["import type { NextRequest } from \"next/server\"\nimport { NextResponse } from \"next/server\"\nimport bcrypt from \"bcryptjs\"\nimport jwt from \"jsonwebtoken\"\nimport connectDB from \"@/lib/db\"\nimport User from \"@/models/User\"\nimport Follow from \"@/models/Follow\"\nimport { signupSchema } from \"@/utils/validation\"\nimport { successResponse, errorResponse, validationErrorResponse } from \"@/utils/response\"\nimport { awardXP } from \"@/utils/awardXP\"\nimport { ReferralSystemFixed } from \"@/utils/referral-system-fixed\"\nimport { generateAvatarFromUsername } from \"@/utils/avatar-generator\"\n\nconst JWT_SECRET = process.env.JWT_SECRET!\n\n\nexport const dynamic = 'force-dynamic'\n\nexport async function POST(request: NextRequest) {\n  try {\n    await connectDB()\n\n    const body = await request.json()\n    console.log('Signup request body:', JSON.stringify(body, null, 2))\n    const { referralCode } = body\n\n    // Validate input\n    const validation = signupSchema.safeParse(body)\n    if (!validation.success) {\n      console.log('Validation failed:', validation.error.format())\n      return validationErrorResponse(validation.error.format())\n    }\n\n    const { username, email, password, firstName, lastName, birthMonth, birthDay, affiliation } = validation.data\n\n    // Check if user already exists\n    const existingUser = await User.findOne({\n      $or: [{ email }, { username }],\n    })\n\n    if (existingUser) {\n      if (existingUser.email === email) {\n        return errorResponse(\"Email already exists\", 400)\n      }\n      if (existingUser.username === username) {\n        return errorResponse(\"Username already exists\", 400)\n      }\n    }\n\n    // Hash password\n    const saltRounds = 12\n    const hashedPassword = await bcrypt.hash(password, saltRounds)\n\n    // Generate initial avatar (will be updated during onboarding)\n    const initialAvatar = generateAvatarFromUsername(username);\n\n    // Create user\n    const user = await User.create({\n      username,\n      email,\n      password: hashedPassword,\n      firstName,\n      lastName,\n      birthMonth,\n      birthDay,\n      affiliation: affiliation || \"Other\",\n      avatar: initialAvatar,\n      points: 10, // Starting XP\n      badges: [\"newcomer\"], // Starting badge\n    })\n\n    // Award signup XP\n    await awardXP(user._id.toString(), \"daily_login\")\n\n    // Auto-follow AkDavid (platform creator)\n    try {\n      const akDavid = await User.findOne({ username: \"AkDavid\" })\n      if (akDavid) {\n        await Follow.create({\n          follower: user._id,\n          following: akDavid._id,\n        })\n      }\n    } catch (error) {\n      console.error(\"Auto-follow AkDavid error:\", error)\n    }\n\n    // Handle referral if code was provided\n    if (referralCode) {\n      try {\n        const success = await ReferralSystemFixed.processReferralFromSignup(referralCode, user._id.toString())\n        if (success) {\n          console.log(`Referral processed successfully for user ${user.username} with code ${referralCode}`)\n        }\n      } catch (error) {\n        console.error(\"Referral creation error:\", error)\n        // Don't fail the signup if referral fails\n      }\n    }\n\n    // Generate JWT\n    const token = jwt.sign({ userId: user._id }, JWT_SECRET, { expiresIn: \"7d\" })\n\n    // Return user data (excluding password)\n    const userData = {\n      id: user._id,\n      username: user.username,\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      birthMonth: user.birthMonth,\n      birthDay: user.birthDay,\n      bio: user.bio,\n      affiliation: user.affiliation,\n      avatar: user.avatar,\n      role: user.role,\n      points: user.points,\n      level: user.level,\n      badges: user.badges,\n      createdAt: user.createdAt,\n    }\n\n    return NextResponse.json(\n      successResponse({\n        token,\n        user: userData,\n      }),\n      { status: 201 }\n    )\n  } catch (error) {\n    console.error(\"Signup error:\", error)\n    return errorResponse(\"Internal server error\", 500)\n  }\n}\n"],"version":3}