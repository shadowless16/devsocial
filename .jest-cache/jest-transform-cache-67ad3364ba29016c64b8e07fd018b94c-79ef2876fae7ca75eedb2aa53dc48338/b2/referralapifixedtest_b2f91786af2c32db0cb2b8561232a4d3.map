{"file":"C:\\Users\\akdav\\Downloads\\devsocial\\__tests__\\referrals\\referral-api-fixed.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\akdav\\Downloads\\devsocial\\__tests__\\referrals\\referral-api-fixed.test.ts"],"sourcesContent":["\nimport { describe, it, expect, beforeAll, afterAll, beforeEach, jest } from '@jest/globals';\nimport { NextRequest } from 'next/server';\nimport mongoose from 'mongoose';\nimport User from '../../models/User';\nimport Referral from '../../models/Referral';\nimport { POST as createReferral, GET as getReferralCode } from '../../app/api/referrals/create/route';\nimport { GET as getReferralStats } from '../../app/api/referrals/stats/route';\nimport { auth } from '../../lib/auth';\n\n// Mock the auth middleware\njest.mock('../../lib/auth');\nconst mockedAuth = auth as jest.Mock;\n\nbeforeAll(async () => {\n  const testDbUri = process.env.MONGODB_TEST_URI || process.env.MONGODB_URI + '_test';\n  await mongoose.connect(testDbUri);\n  \n  // Setup default auth mock\n  mockedAuth.mockResolvedValue({ user: { id: 'mockUserId' } });\n}, 60000);\n\nafterAll(async () => {\n  await mongoose.disconnect();\n});\n\nbeforeEach(async () => {\n  // Clean up test data - be careful with this approach in production!\n  await User.deleteMany({ email: { $regex: /@example\\.com$/ } });\n  await Referral.deleteMany({});\n  // Reset auth mock to default\n  mockedAuth.mockResolvedValue({ user: { id: 'mockUserId' } });\n});\n\ndescribe('Referral API Endpoints', () => {\n  describe('GET /api/referrals/create', () => {\n    it('should return referral code for authenticated user', async () => {\n      const user = await User.create({\n        _id: 'mockUserId',\n        username: 'testuser',\n        email: 'test@example.com',\n        password: 'hashedpassword',\n        referralCode: 'TEST123',\n      });\n\n      const request = new NextRequest('http://localhost/api/referrals/create');\n      const response = await getReferralCode(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(data.data.referralCode).toBe('TEST123');\n    });\n\n    it('should return 401 for unauthenticated request', async () => {\n      mockedAuth.mockResolvedValueOnce({ user: null });\n\n      const request = new NextRequest('http://localhost/api/referrals/create');\n      const response = await getReferralCode(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.success).toBe(false);\n    });\n  });\n\n  describe('POST /api/referrals/create', () => {\n    let referrer: any, referred: any;\n\n    beforeEach(async () => {\n      referrer = await User.create({\n        _id: 'mockUserId',\n        username: 'referrer',\n        email: 'referrer@example.com',\n        password: 'hashedpassword',\n        referralCode: 'REF123',\n      });\n\n      referred = await User.create({\n        username: 'referred',\n        email: 'referred@example.com',\n        password: 'hashedpassword',\n      });\n    });\n\n    it('should create referral successfully', async () => {\n      const request = new NextRequest('http://localhost/api/referrals/create', {\n        method: 'POST',\n        body: JSON.stringify({ referredUserId: referred._id.toString() }),\n      });\n\n      const response = await createReferral(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(201);\n      expect(data.success).toBe(true);\n      expect(data.data.referral).toBeDefined();\n      expect(data.data.referral.status).toBe('pending');\n    });\n\n    it('should return 400 for missing referredUserId', async () => {\n      const request = new NextRequest('http://localhost/api/referrals/create', {\n        method: 'POST',\n        body: JSON.stringify({}),\n      });\n\n      const response = await createReferral(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.success).toBe(false);\n      expect(data.message).toBe('Referred user ID is required');\n    });\n\n    it('should return 400 for self-referral', async () => {\n      const request = new NextRequest('http://localhost/api/referrals/create', {\n        method: 'POST',\n        body: JSON.stringify({ referredUserId: referrer._id.toString() }),\n      });\n\n      const response = await createReferral(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(400);\n      expect(data.success).toBe(false);\n      expect(data.message).toBe('Cannot refer yourself');\n    });\n\n    it('should return 409 if referral already exists', async () => {\n        await Referral.create({\n          referrer: referrer._id,\n          referred: referred._id,\n          referralCode: 'REF123',\n          status: 'pending',\n        });\n  \n        const request = new NextRequest('http://localhost/api/referrals/create', {\n          method: 'POST',\n          body: JSON.stringify({ referredUserId: referred._id.toString() }),\n        });\n  \n        const response = await createReferral(request);\n        const data = await response.json();\n  \n        expect(response.status).toBe(409);\n        expect(data.success).toBe(false);\n        expect(data.message).toBe('Referral already exists');\n      });\n  });\n\n  describe('GET /api/referrals/stats', () => {\n    let referrer: any, referred1: any, referred2: any;\n\n    beforeEach(async () => {\n      referrer = await User.create({\n        _id: 'mockUserId',\n        username: 'referrer',\n        email: 'referrer@example.com',\n        password: 'hashedpassword',\n        referralCode: 'REF123',\n      });\n\n      referred1 = await User.create({\n        username: 'referred1',\n        email: 'referred1@example.com',\n        password: 'hashedpassword',\n      });\n\n      referred2 = await User.create({\n        username: 'referred2',\n        email: 'referred2@example.com',\n        password: 'hashedpassword',\n      });\n\n      await Referral.create({\n        referrer: referrer._id,\n        referred: referred1._id,\n        referralCode: 'REF123',\n        status: 'completed',\n      });\n\n      await Referral.create({\n        referrer: referrer._id,\n        referred: referred2._id,\n        referralCode: 'REF123',\n        status: 'pending',\n      });\n    });\n\n    it('should return referral statistics', async () => {\n      const request = new NextRequest('http://localhost/api/referrals/stats');\n      const response = await getReferralStats(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(data.data.stats).toBeDefined();\n      expect(data.data.recentReferrals).toBeDefined();\n      expect(data.data.recentReferrals.length).toBe(2);\n    });\n  });\n});\n"],"version":3}