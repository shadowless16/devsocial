{"file":"C:\\Users\\akdav\\Downloads\\devsocial\\lib\\db.ts","mappings":";;;;;;;;;;;;;;AAAA,wDAA+B;AAE/B,kEAAkE;AAClE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;IAC7B,IAAI,CAAC;QACH,MAAM,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAA;QACpC,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;QAC5B,MAAM,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,YAAY,CAAC,EAAE,CAAC,CAAA;IAC7D,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,0CAA0C;IAC5C,CAAC;AACH,CAAC;AAED,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,CAAA;AAE3C,IAAI,CAAC,WAAW,EAAE,CAAC;IACjB,MAAM,IAAI,KAAK,CAAC,sEAAsE,CAAC,CAAA;AACzF,CAAC;AAED;;;;GAIG;AACH,IAAI,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAA;AAE5B,IAAI,CAAC,MAAM,EAAE,CAAC;IACZ,MAAM,GAAG,MAAM,CAAC,QAAQ,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,CAAA;AAC1D,CAAC;AAED,SAAe,SAAS;;QACtB,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC;YAChB,OAAO,MAAM,CAAC,IAAI,CAAA;QACpB,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;YACpB,MAAM,IAAI,GAAG;gBACX,cAAc,EAAE,KAAK;aACtB,CAAA;YAED,MAAM,CAAC,OAAO,GAAG,kBAAQ,CAAC,OAAO,CAAC,WAAY,EAAE,IAAI,CAAQ,CAAA;QAC9D,CAAC;QAED,IAAI,CAAC;YACH,MAAM,CAAC,IAAI,GAAG,MAAM,MAAM,CAAC,OAAO,CAAA;QACpC,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACX,MAAM,CAAC,OAAO,GAAG,IAAI,CAAA;YACrB,MAAM,CAAC,CAAA;QACT,CAAC;QAED,OAAO,MAAM,CAAC,IAAI,CAAA;IACpB,CAAC;CAAA;AAED,kBAAe,SAAS,CAAA","names":[],"sources":["C:\\Users\\akdav\\Downloads\\devsocial\\lib\\db.ts"],"sourcesContent":["import mongoose from \"mongoose\"\n\n// Try to load environment variables if they're not already loaded\nif (!process.env.MONGODB_URI) {\n  try {\n    const { config } = require('dotenv')\n    const path = require('path')\n    config({ path: path.resolve(process.cwd(), '.env.local') })\n  } catch (error) {\n    // Ignore error if dotenv is not available\n  }\n}\n\nconst MONGODB_URI = process.env.MONGODB_URI\n\nif (!MONGODB_URI) {\n  throw new Error(\"Please define the MONGODB_URI environment variable inside .env.local\")\n}\n\n/**\n * Global is used here to maintain a cached connection across hot reloads\n * in development. This prevents connections growing exponentially\n * during API Route usage.\n */\nlet cached = global.mongoose\n\nif (!cached) {\n  cached = global.mongoose = { conn: null, promise: null }\n}\n\nasync function connectDB() {\n  if (cached.conn) {\n    return cached.conn\n  }\n\n  if (!cached.promise) {\n    const opts = {\n      bufferCommands: false,\n    }\n\n    cached.promise = mongoose.connect(MONGODB_URI!, opts) as any\n  }\n\n  try {\n    cached.conn = await cached.promise\n  } catch (e) {\n    cached.promise = null\n    throw e\n  }\n\n  return cached.conn\n}\n\nexport default connectDB\n"],"version":3}