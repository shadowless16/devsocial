{"file":"C:\\Users\\akdav\\Downloads\\devsocial\\app\\api\\save-avatar\\route.ts","mappings":";;;;;;;;;;;;;;AAKA,oBAuCC;AA5CD,wCAAuD;AACvD,yCAA4C;AAC5C,kDAAgC;AAChC,yDAAgC;AAEhC,SAAsB,IAAI,CAAC,OAAoB;;;QAC7C,IAAI,CAAC;YACH,MAAM,OAAO,GAAG,MAAM,IAAA,4BAAgB,GAAE,CAAA;YACxC,IAAI,CAAC,CAAA,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,0CAAE,KAAK,CAAA,EAAE,CAAC;gBAC1B,OAAO,qBAAY,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,cAAc,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAA;YACtE,CAAC;YAED,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,OAAO,CAAC,IAAI,EAAE,CAAA;YAC1C,IAAI,CAAC,SAAS,EAAE,CAAC;gBACf,OAAO,qBAAY,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,oBAAoB,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAA;YAC5E,CAAC;YAED,sBAAsB;YACtB,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,uBAAuB,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;gBAChF,OAAO,qBAAY,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,oBAAoB,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAA;YAC5E,CAAC;YAED,MAAM,IAAA,YAAS,GAAE,CAAA;YAEjB,MAAM,IAAI,GAAG,MAAM,cAAI,CAAC,gBAAgB,CACtC,EAAE,KAAK,EAAE,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,EAC7B,EAAE,MAAM,EAAE,SAAS,EAAE,EACrB,EAAE,GAAG,EAAE,IAAI,EAAE,CACd,CAAA;YAED,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,OAAO,qBAAY,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,gBAAgB,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAA;YACxE,CAAC;YAED,OAAO,qBAAY,CAAC,IAAI,CAAC;gBACvB,OAAO,EAAE,IAAI;gBACb,SAAS;gBACT,OAAO,EAAE,2BAA2B;aACrC,CAAC,CAAA;QAEJ,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,oBAAoB,EAAE,KAAK,CAAC,CAAA;YAC1C,OAAO,qBAAY,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,uBAAuB,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAA;QAC/E,CAAC;IACH,CAAC;CAAA","names":[],"sources":["C:\\Users\\akdav\\Downloads\\devsocial\\app\\api\\save-avatar\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { getServerSession } from 'next-auth'\nimport connectDB from '@/lib/db'\nimport User from '@/models/User'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const session = await getServerSession()\n    if (!session?.user?.email) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\n    }\n\n    const { avatarUrl } = await request.json()\n    if (!avatarUrl) {\n      return NextResponse.json({ error: 'avatarUrl required' }, { status: 400 })\n    }\n\n    // Validate URL format\n    if (!avatarUrl.includes('models.readyplayer.me') || !avatarUrl.endsWith('.glb')) {\n      return NextResponse.json({ error: 'Invalid avatar URL' }, { status: 400 })\n    }\n\n    await connectDB()\n    \n    const user = await User.findOneAndUpdate(\n      { email: session.user.email },\n      { avatar: avatarUrl },\n      { new: true }\n    )\n\n    if (!user) {\n      return NextResponse.json({ error: 'User not found' }, { status: 404 })\n    }\n\n    return NextResponse.json({ \n      success: true, \n      avatarUrl,\n      message: 'Avatar saved successfully' \n    })\n\n  } catch (error) {\n    console.error('Save avatar error:', error)\n    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })\n  }\n}"],"version":3}