ce0c84815d8c6527f39a58a479ccec87
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const mongoose_1 = __importDefault(require("mongoose"));
const mongodb_memory_server_1 = require("mongodb-memory-server");
const User_1 = __importDefault(require("../../models/User"));
const Referral_1 = __importDefault(require("../../models/Referral"));
const UserStats_1 = __importDefault(require("../../models/UserStats"));
const referral_system_1 = require("../../utils/referral-system");
const awardXP_1 = require("../../utils/awardXP");
let mongoServer;
(0, globals_1.beforeAll)(() => __awaiter(void 0, void 0, void 0, function* () {
    mongoServer = yield mongodb_memory_server_1.MongoMemoryServer.create();
    const mongoUri = mongoServer.getUri();
    yield mongoose_1.default.connect(mongoUri);
}), 60000);
(0, globals_1.afterAll)(() => __awaiter(void 0, void 0, void 0, function* () {
    yield mongoose_1.default.disconnect();
    yield mongoServer.stop();
}));
(0, globals_1.beforeEach)(() => __awaiter(void 0, void 0, void 0, function* () {
    yield User_1.default.deleteMany({});
    yield Referral_1.default.deleteMany({});
    yield UserStats_1.default.deleteMany({});
}));
(0, globals_1.describe)('ReferralSystem', () => {
    (0, globals_1.describe)('getReferralCode', () => {
        (0, globals_1.it)('should return existing referral code', () => __awaiter(void 0, void 0, void 0, function* () {
            const user = yield User_1.default.create({
                username: 'testuser',
                email: 'test@example.com',
                password: 'hashedpassword',
                referralCode: 'EXISTING123'
            });
            const code = yield referral_system_1.ReferralSystem.getReferralCode(user._id.toString());
            (0, globals_1.expect)(code).toBe('EXISTING123');
        }));
        (0, globals_1.it)('should generate referral code if missing', () => __awaiter(void 0, void 0, void 0, function* () {
            const user = yield User_1.default.create({
                username: 'testuser',
                email: 'test@example.com',
                password: 'hashedpassword'
            });
            // Remove referral code to simulate old user
            yield User_1.default.findByIdAndUpdate(user._id, { $unset: { referralCode: 1 } });
            const code = yield referral_system_1.ReferralSystem.getReferralCode(user._id.toString());
            (0, globals_1.expect)(code).toBeDefined();
            (0, globals_1.expect)(code).toMatch(/^TEST[A-Z0-9]+$/); // Should start with first 4 chars of username
        }));
        (0, globals_1.it)('should throw error for non-existent user', () => __awaiter(void 0, void 0, void 0, function* () {
            const fakeId = new mongoose_1.default.Types.ObjectId().toString();
            yield (0, globals_1.expect)(referral_system_1.ReferralSystem.getReferralCode(fakeId)).rejects.toThrow('User not found');
        }));
    });
    (0, globals_1.describe)('createReferral', () => {
        let referrer, referred;
        (0, globals_1.beforeEach)(() => __awaiter(void 0, void 0, void 0, function* () {
            referrer = yield User_1.default.create({
                username: 'referrer',
                email: 'referrer@example.com',
                password: 'hashedpassword',
                referralCode: 'REF123'
            });
            referred = yield User_1.default.create({
                username: 'referred',
                email: 'referred@example.com',
                password: 'hashedpassword'
            });
        }));
        (0, globals_1.it)('should create a new referral successfully', () => __awaiter(void 0, void 0, void 0, function* () {
            const referral = yield referral_system_1.ReferralSystem.createReferral(referrer._id.toString(), referred._id.toString());
            (0, globals_1.expect)(referral).toBeDefined();
            (0, globals_1.expect)(referral.referrer.toString()).toBe(referrer._id.toString());
            (0, globals_1.expect)(referral.referred.toString()).toBe(referred._id.toString());
            (0, globals_1.expect)(referral.referralCode).toBe('REF123');
            (0, globals_1.expect)(referral.status).toBe('pending');
            (0, globals_1.expect)(referral.expiresAt).toBeInstanceOf(Date);
        }));
        (0, globals_1.it)('should throw error for duplicate referral', () => __awaiter(void 0, void 0, void 0, function* () {
            yield referral_system_1.ReferralSystem.createReferral(referrer._id.toString(), referred._id.toString());
            yield (0, globals_1.expect)(referral_system_1.ReferralSystem.createReferral(referrer._id.toString(), referred._id.toString())).rejects.toThrow('Referral already exists');
        }));
        (0, globals_1.it)('should set expiration date 30 days from now', () => __awaiter(void 0, void 0, void 0, function* () {
            const referral = yield referral_system_1.ReferralSystem.createReferral(referrer._id.toString(), referred._id.toString());
            const expectedExpiry = new Date();
            expectedExpiry.setDate(expectedExpiry.getDate() + 30);
            const timeDiff = Math.abs(referral.expiresAt.getTime() - expectedExpiry.getTime());
            (0, globals_1.expect)(timeDiff).toBeLessThan(1000); // Within 1 second
        }));
    });
    (0, globals_1.describe)('checkReferralCompletion', () => {
        let referrer, referred, referral;
        (0, globals_1.beforeEach)(() => __awaiter(void 0, void 0, void 0, function* () {
            referrer = yield User_1.default.create({
                username: 'referrer',
                email: 'referrer@example.com',
                password: 'hashedpassword',
                referralCode: 'REF123',
                points: 100
            });
            referred = yield User_1.default.create({
                username: 'referred',
                email: 'referred@example.com',
                password: 'hashedpassword',
                points: 10
            });
            referral = yield referral_system_1.ReferralSystem.createReferral(referrer._id.toString(), referred._id.toString());
            // Create UserStats for referred user
            yield UserStats_1.default.create({
                user: referred._id,
                totalPosts: 0,
                totalXP: 10,
                totalReferrals: 0
            });
        }));
        (0, globals_1.it)('should complete referral when user meets criteria', () => __awaiter(void 0, void 0, void 0, function* () {
            // Update user stats to meet completion criteria
            yield UserStats_1.default.findOneAndUpdate({ user: referred._id }, { totalPosts: 1, totalXP: 60 });
            yield referral_system_1.ReferralSystem.checkReferralCompletion(referred._id.toString());
            const updatedReferral = yield Referral_1.default.findById(referral._id);
            (0, globals_1.expect)(updatedReferral === null || updatedReferral === void 0 ? void 0 : updatedReferral.status).toBe('completed');
            (0, globals_1.expect)(updatedReferral === null || updatedReferral === void 0 ? void 0 : updatedReferral.completedAt).toBeInstanceOf(Date);
            (0, globals_1.expect)(updatedReferral === null || updatedReferral === void 0 ? void 0 : updatedReferral.rewardsClaimed).toBe(true);
            // Check XP was awarded
            const updatedReferrer = yield User_1.default.findById(referrer._id);
            const updatedReferred = yield User_1.default.findById(referred._id);
            (0, globals_1.expect)(updatedReferrer === null || updatedReferrer === void 0 ? void 0 : updatedReferrer.points).toBeGreaterThan(100); // Should have bonus XP
            (0, globals_1.expect)(updatedReferred === null || updatedReferred === void 0 ? void 0 : updatedReferred.points).toBeGreaterThan(10); // Should have bonus XP
        }));
        (0, globals_1.it)('should not complete referral when user does not meet criteria', () => __awaiter(void 0, void 0, void 0, function* () {
            // User has posts but not enough XP
            yield UserStats_1.default.findOneAndUpdate({ user: referred._id }, { totalPosts: 1, totalXP: 30 });
            yield referral_system_1.ReferralSystem.checkReferralCompletion(referred._id.toString());
            const updatedReferral = yield Referral_1.default.findById(referral._id);
            (0, globals_1.expect)(updatedReferral === null || updatedReferral === void 0 ? void 0 : updatedReferral.status).toBe('pending');
        }));
        (0, globals_1.it)('should handle missing UserStats gracefully', () => __awaiter(void 0, void 0, void 0, function* () {
            // Delete UserStats
            yield UserStats_1.default.deleteOne({ user: referred._id });
            yield (0, globals_1.expect)(referral_system_1.ReferralSystem.checkReferralCompletion(referred._id.toString())).not.toThrow();
            const updatedReferral = yield Referral_1.default.findById(referral._id);
            (0, globals_1.expect)(updatedReferral === null || updatedReferral === void 0 ? void 0 : updatedReferral.status).toBe('pending');
        }));
    });
    (0, globals_1.describe)('getReferralStats', () => {
        let referrer, referred1, referred2;
        (0, globals_1.beforeEach)(() => __awaiter(void 0, void 0, void 0, function* () {
            referrer = yield User_1.default.create({
                username: 'referrer',
                email: 'referrer@example.com',
                password: 'hashedpassword',
                referralCode: 'REF123'
            });
            referred1 = yield User_1.default.create({
                username: 'referred1',
                email: 'referred1@example.com',
                password: 'hashedpassword'
            });
            referred2 = yield User_1.default.create({
                username: 'referred2',
                email: 'referred2@example.com',
                password: 'hashedpassword'
            });
            // Create referrals
            yield Referral_1.default.create({
                referrer: referrer._id,
                referred: referred1._id,
                referralCode: 'REF123',
                status: 'completed',
                completedAt: new Date(),
                expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
                referrerReward: 25
            });
            yield Referral_1.default.create({
                referrer: referrer._id,
                referred: referred2._id,
                referralCode: 'REF123',
                status: 'pending',
                expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),
                referrerReward: 25
            });
        }));
        (0, globals_1.it)('should return correct referral statistics', () => __awaiter(void 0, void 0, void 0, function* () {
            var _a, _b, _c, _d;
            const stats = yield referral_system_1.ReferralSystem.getReferralStats(referrer._id.toString());
            (0, globals_1.expect)(stats).toBeDefined();
            (0, globals_1.expect)(stats.stats).toBeDefined();
            (0, globals_1.expect)(stats.recentReferrals).toBeDefined();
            // Check stats structure
            (0, globals_1.expect)((_a = stats.stats.completed) === null || _a === void 0 ? void 0 : _a.count).toBe(1);
            (0, globals_1.expect)((_b = stats.stats.completed) === null || _b === void 0 ? void 0 : _b.rewards).toBe(25);
            (0, globals_1.expect)((_c = stats.stats.pending) === null || _c === void 0 ? void 0 : _c.count).toBe(1);
            (0, globals_1.expect)((_d = stats.stats.pending) === null || _d === void 0 ? void 0 : _d.rewards).toBe(25);
            // Check recent referrals
            (0, globals_1.expect)(stats.recentReferrals).toHaveLength(2);
        }));
        (0, globals_1.it)('should handle user with no referrals', () => __awaiter(void 0, void 0, void 0, function* () {
            const newUser = yield User_1.default.create({
                username: 'newuser',
                email: 'newuser@example.com',
                password: 'hashedpassword'
            });
            const stats = yield referral_system_1.ReferralSystem.getReferralStats(newUser._id.toString());
            (0, globals_1.expect)(stats.stats).toEqual({});
            (0, globals_1.expect)(stats.recentReferrals).toHaveLength(0);
        }));
    });
    (0, globals_1.describe)('expireOldReferrals', () => {
        (0, globals_1.it)('should expire old pending referrals', () => __awaiter(void 0, void 0, void 0, function* () {
            const referrer = yield User_1.default.create({
                username: 'referrer',
                email: 'referrer@example.com',
                password: 'hashedpassword',
                referralCode: 'REF123'
            });
            const referred = yield User_1.default.create({
                username: 'referred',
                email: 'referred@example.com',
                password: 'hashedpassword'
            });
            // Create expired referral
            const expiredDate = new Date(Date.now() - 24 * 60 * 60 * 1000); // 1 day ago
            yield Referral_1.default.create({
                referrer: referrer._id,
                referred: referred._id,
                referralCode: 'REF123',
                status: 'pending',
                expiresAt: expiredDate
            });
            yield referral_system_1.ReferralSystem.expireOldReferrals();
            const expiredReferral = yield Referral_1.default.findOne({
                referrer: referrer._id,
                referred: referred._id
            });
            (0, globals_1.expect)(expiredReferral === null || expiredReferral === void 0 ? void 0 : expiredReferral.status).toBe('expired');
        }));
        (0, globals_1.it)('should not expire non-expired referrals', () => __awaiter(void 0, void 0, void 0, function* () {
            const referrer = yield User_1.default.create({
                username: 'referrer',
                email: 'referrer@example.com',
                password: 'hashedpassword',
                referralCode: 'REF123'
            });
            const referred = yield User_1.default.create({
                username: 'referred',
                email: 'referred@example.com',
                password: 'hashedpassword'
            });
            // Create non-expired referral
            const futureDate = new Date(Date.now() + 24 * 60 * 60 * 1000); // 1 day from now
            yield Referral_1.default.create({
                referrer: referrer._id,
                referred: referred._id,
                referralCode: 'REF123',
                status: 'pending',
                expiresAt: futureDate
            });
            yield referral_system_1.ReferralSystem.expireOldReferrals();
            const referral = yield Referral_1.default.findOne({
                referrer: referrer._id,
                referred: referred._id
            });
            (0, globals_1.expect)(referral === null || referral === void 0 ? void 0 : referral.status).toBe('pending');
        }));
    });
    (0, globals_1.describe)('Integration with XP System', () => {
        let referrer, referred;
        (0, globals_1.beforeEach)(() => __awaiter(void 0, void 0, void 0, function* () {
            referrer = yield User_1.default.create({
                username: 'referrer',
                email: 'referrer@example.com',
                password: 'hashedpassword',
                referralCode: 'REF123',
                points: 100
            });
            referred = yield User_1.default.create({
                username: 'referred',
                email: 'referred@example.com',
                password: 'hashedpassword',
                points: 10
            });
            yield referral_system_1.ReferralSystem.createReferral(referrer._id.toString(), referred._id.toString());
            // Create UserStats
            yield UserStats_1.default.create({
                user: referred._id,
                totalPosts: 0,
                totalXP: 10,
                totalReferrals: 0
            });
        }));
        (0, globals_1.it)('should complete referral when user gains XP through posts', () => __awaiter(void 0, void 0, void 0, function* () {
            // Simulate user creating posts and gaining XP
            yield UserStats_1.default.findOneAndUpdate({ user: referred._id }, { $inc: { totalPosts: 1, totalXP: 50 } });
            // Award XP which should trigger referral check
            yield (0, awardXP_1.awardXP)(referred._id.toString(), 'post_creation');
            const referral = yield Referral_1.default.findOne({
                referrer: referrer._id,
                referred: referred._id
            });
            (0, globals_1.expect)(referral === null || referral === void 0 ? void 0 : referral.status).toBe('completed');
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,