5dd593a6aac30e1a5ca54325954dda7a
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mongodb_memory_server_1 = require("mongodb-memory-server");
const mongoose_1 = __importDefault(require("mongoose"));
const User_1 = __importDefault(require("@/models/User"));
describe('Growth Analytics - Simple Tests', () => {
    let mongoServer;
    beforeAll(() => __awaiter(void 0, void 0, void 0, function* () {
        mongoServer = yield mongodb_memory_server_1.MongoMemoryServer.create();
        const mongoUri = mongoServer.getUri();
        yield mongoose_1.default.connect(mongoUri);
    }));
    afterAll(() => __awaiter(void 0, void 0, void 0, function* () {
        yield mongoose_1.default.disconnect();
        yield mongoServer.stop();
    }));
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        yield User_1.default.deleteMany({});
    }));
    describe('User Growth Calculations', () => {
        it('should calculate growth rate correctly', () => __awaiter(void 0, void 0, void 0, function* () {
            const now = new Date();
            // Create users in current period (last 30 days)
            yield User_1.default.create([
                {
                    username: 'user1',
                    email: 'user1@test.com',
                    password: 'password123',
                    firstName: 'User',
                    lastName: 'One',
                    createdAt: new Date(now.getTime() - 5 * 24 * 60 * 60 * 1000)
                },
                {
                    username: 'user2',
                    email: 'user2@test.com',
                    password: 'password123',
                    firstName: 'User',
                    lastName: 'Two',
                    createdAt: new Date(now.getTime() - 10 * 24 * 60 * 60 * 1000)
                }
            ]);
            // Create users in previous period (30-60 days ago)
            yield User_1.default.create([
                {
                    username: 'user3',
                    email: 'user3@test.com',
                    password: 'password123',
                    firstName: 'User',
                    lastName: 'Three',
                    createdAt: new Date(now.getTime() - 35 * 24 * 60 * 60 * 1000)
                }
            ]);
            // Calculate metrics manually
            const totalUsers = yield User_1.default.countDocuments();
            const thirtyDaysAgo = new Date(now);
            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
            const newUsers = yield User_1.default.countDocuments({
                createdAt: { $gte: thirtyDaysAgo, $lte: now }
            });
            const sixtyDaysAgo = new Date(now);
            sixtyDaysAgo.setDate(sixtyDaysAgo.getDate() - 60);
            const previousUsers = yield User_1.default.countDocuments({
                createdAt: { $gte: sixtyDaysAgo, $lt: thirtyDaysAgo }
            });
            const growthRate = previousUsers > 0 ?
                Math.round(((newUsers - previousUsers) / previousUsers) * 100) : 0;
            expect(totalUsers).toBe(3);
            expect(newUsers).toBe(2);
            expect(previousUsers).toBe(1);
            expect(growthRate).toBe(100); // 100% growth (2 vs 1)
        }));
        it('should handle acquisition channels correctly', () => __awaiter(void 0, void 0, void 0, function* () {
            var _a, _b;
            const now = new Date();
            yield User_1.default.create([
                {
                    username: 'user1',
                    email: 'user1@test.com',
                    password: 'password123',
                    firstName: 'User',
                    lastName: 'One',
                    registrationSource: 'direct',
                    createdAt: now
                },
                {
                    username: 'user2',
                    email: 'user2@test.com',
                    password: 'password123',
                    firstName: 'User',
                    lastName: 'Two',
                    registrationSource: 'referral',
                    createdAt: now
                },
                {
                    username: 'user3',
                    email: 'user3@test.com',
                    password: 'password123',
                    firstName: 'User',
                    lastName: 'Three',
                    registrationSource: 'direct',
                    createdAt: now
                }
            ]);
            // Test acquisition channel aggregation
            const acquisitionData = yield User_1.default.aggregate([
                { $match: { createdAt: { $gte: new Date(now.getTime() - 24 * 60 * 60 * 1000), $lte: now } } },
                { $group: { _id: '$registrationSource', count: { $sum: 1 } } }
            ]);
            const totalNewUsers = acquisitionData.reduce((sum, item) => sum + item.count, 0);
            const acquisitionChannels = acquisitionData.map(item => ({
                channel: item._id || 'direct',
                users: item.count,
                percentage: Math.round((item.count / Math.max(totalNewUsers, 1)) * 100)
            }));
            expect(acquisitionChannels).toHaveLength(2);
            expect((_a = acquisitionChannels.find(c => c.channel === 'direct')) === null || _a === void 0 ? void 0 : _a.users).toBe(2);
            expect((_b = acquisitionChannels.find(c => c.channel === 'referral')) === null || _b === void 0 ? void 0 : _b.users).toBe(1);
            expect(totalNewUsers).toBe(3);
        }));
        it('should handle empty database gracefully', () => __awaiter(void 0, void 0, void 0, function* () {
            const totalUsers = yield User_1.default.countDocuments();
            const newUsers = yield User_1.default.countDocuments({
                createdAt: { $gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) }
            });
            expect(totalUsers).toBe(0);
            expect(newUsers).toBe(0);
        }));
    });
    describe('MCP Integration Test', () => {
        it('should work with MCP API endpoint', () => __awaiter(void 0, void 0, void 0, function* () {
            // Create test data
            const now = new Date();
            yield User_1.default.create([
                {
                    username: 'testuser1',
                    email: 'test1@test.com',
                    password: 'password123',
                    firstName: 'Test',
                    lastName: 'User',
                    registrationSource: 'direct',
                    createdAt: new Date(now.getTime() - 5 * 24 * 60 * 60 * 1000)
                }
            ]);
            // Test the database queries that MCP would use
            const totalUsers = yield User_1.default.countDocuments();
            const thirtyDaysAgo = new Date(now);
            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
            const newUsers = yield User_1.default.countDocuments({
                createdAt: { $gte: thirtyDaysAgo, $lte: now }
            });
            expect(totalUsers).toBe(1);
            expect(newUsers).toBe(1);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,