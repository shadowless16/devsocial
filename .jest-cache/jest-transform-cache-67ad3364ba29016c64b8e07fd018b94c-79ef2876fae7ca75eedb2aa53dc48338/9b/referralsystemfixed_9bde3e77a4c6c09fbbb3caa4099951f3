ab22af665ef324a488f3412ad98c2929
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReferralSystemFixed = void 0;
const Referral_1 = __importDefault(require("@/models/Referral"));
const User_1 = __importDefault(require("@/models/User"));
const UserStats_1 = __importDefault(require("@/models/UserStats"));
const awardXP_1 = require("./awardXP");
const db_1 = __importDefault(require("@/lib/db"));
class ReferralSystemFixed {
    static getReferralCode(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, db_1.default)();
            const user = yield User_1.default.findById(userId);
            if (!user)
                throw new Error("User not found");
            if (!user.referralCode) {
                const timestamp = Date.now().toString(36);
                const username = user.username.substring(0, 4).toUpperCase();
                const random = Math.random().toString(36).substring(2, 6).toUpperCase();
                user.referralCode = `${username}${timestamp}${random}`;
                yield user.save();
            }
            return user.referralCode;
        });
    }
    static validateReferralCode(referralCode) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, db_1.default)();
            if (!referralCode || referralCode.trim() === '') {
                return { valid: false };
            }
            const referrer = yield User_1.default.findOne({ referralCode: referralCode.trim() });
            return {
                valid: !!referrer,
                referrer: referrer ? { id: referrer._id.toString(), username: referrer.username } : undefined
            };
        });
    }
    static createReferral(referrerId, referredUserId, referralCode) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, db_1.default)();
            // Prevent self-referral
            if (referrerId === referredUserId) {
                throw new Error("Cannot refer yourself");
            }
            // Check if referral already exists
            const existingReferral = yield Referral_1.default.findOne({
                $or: [
                    { referrer: referrerId, referred: referredUserId },
                    { referred: referredUserId } // Prevent multiple referrals for same user
                ]
            });
            if (existingReferral) {
                throw new Error("Referral already exists for this user");
            }
            // Use provided code or get referrer's code
            const finalReferralCode = referralCode || (yield this.getReferralCode(referrerId));
            // Create referral with 30-day expiration
            const expiresAt = new Date();
            expiresAt.setDate(expiresAt.getDate() + 30);
            const referral = new Referral_1.default({
                referrer: referrerId,
                referred: referredUserId,
                referralCode: finalReferralCode,
                expiresAt,
                status: "pending",
            });
            yield referral.save();
            // Immediately check if the referred user already meets completion criteria
            yield this.checkReferralCompletion(referredUserId);
            return referral;
        });
    }
    static checkReferralCompletion(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, db_1.default)();
            const pendingReferrals = yield Referral_1.default.find({
                referred: userId,
                status: "pending",
                expiresAt: { $gt: new Date() },
            });
            for (const referral of pendingReferrals) {
                try {
                    const user = yield User_1.default.findById(userId);
                    if (!user)
                        continue;
                    // Ensure UserStats exists
                    let userStats = yield UserStats_1.default.findOne({ user: userId });
                    if (!userStats) {
                        userStats = yield UserStats_1.default.create({
                            user: userId,
                            totalPosts: 0,
                            totalXP: user.points || 0,
                            totalReferrals: 0
                        });
                    }
                    // More lenient completion criteria: user has at least 25 XP (reduced from 50)
                    const hasMinimumActivity = userStats.totalXP >= 25;
                    if (hasMinimumActivity) {
                        // Mark referral as completed
                        referral.status = "completed";
                        referral.completedAt = new Date();
                        referral.rewardsClaimed = true;
                        yield referral.save();
                        // Award XP to both users
                        yield (0, awardXP_1.awardXP)(referral.referrer.toString(), "referral_success", referral._id.toString());
                        yield (0, awardXP_1.awardXP)(userId, "referral_bonus", referral._id.toString());
                        // Update referral stats
                        yield UserStats_1.default.findOneAndUpdate({ user: referral.referrer }, { $inc: { totalReferrals: 1 } }, { upsert: true });
                        console.log(`Referral completed: ${referral._id}`);
                    }
                }
                catch (error) {
                    console.error(`Error processing referral completion for ${userId}:`, error);
                }
            }
        });
    }
    static processReferralFromSignup(referralCode, newUserId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield (0, db_1.default)();
                const validation = yield this.validateReferralCode(referralCode);
                if (!validation.valid || !validation.referrer) {
                    console.log(`Invalid referral code: ${referralCode}`);
                    return false;
                }
                // Create the referral
                yield this.createReferral(validation.referrer.id, newUserId, referralCode);
                console.log(`Referral created: ${validation.referrer.username} -> new user ${newUserId}`);
                return true;
            }
            catch (error) {
                console.error("Error processing referral from signup:", error);
                return false;
            }
        });
    }
    static getReferralStats(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, db_1.default)();
            // Check for any pending referrals that should be completed
            yield this.checkUserReferrals(userId);
            const userObjectId = new User_1.default.base.Types.ObjectId(userId);
            const stats = yield Referral_1.default.aggregate([
                { $match: { referrer: userObjectId } },
                {
                    $group: {
                        _id: "$status",
                        count: { $sum: 1 },
                        totalRewards: { $sum: "$referrerReward" },
                    },
                },
            ]);
            const recentReferrals = yield Referral_1.default.find({ referrer: userObjectId })
                .populate("referred", "username displayName avatar")
                .sort({ createdAt: -1 })
                .limit(10);
            return {
                stats: stats.reduce((acc, stat) => {
                    acc[stat._id] = { count: stat.count, rewards: stat.totalRewards };
                    return acc;
                }, {}),
                recentReferrals,
            };
        });
    }
    static expireOldReferrals() {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, db_1.default)();
            const result = yield Referral_1.default.updateMany({
                status: "pending",
                expiresAt: { $lt: new Date() },
            }, { status: "expired" });
            console.log(`Expired ${result.modifiedCount} old referrals`);
        });
    }
    static checkUserReferrals(referrerId) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, db_1.default)();
            const pendingReferrals = yield Referral_1.default.find({
                referrer: referrerId,
                status: "pending",
                expiresAt: { $gt: new Date() },
            }).populate("referred", "_id");
            for (const referral of pendingReferrals) {
                try {
                    const referredUser = yield User_1.default.findById(referral.referred._id);
                    if (!referredUser)
                        continue;
                    let userStats = yield UserStats_1.default.findOne({ user: referral.referred._id });
                    if (!userStats) {
                        userStats = yield UserStats_1.default.create({
                            user: referral.referred._id,
                            totalPosts: 0,
                            totalXP: referredUser.points || 0,
                            totalReferrals: 0
                        });
                    }
                    // Check completion criteria: at least 25 XP
                    if (userStats.totalXP >= 25) {
                        referral.status = "completed";
                        referral.completedAt = new Date();
                        referral.rewardsClaimed = true;
                        yield referral.save();
                        yield (0, awardXP_1.awardXP)(referral.referrer.toString(), "referral_success", referral._id.toString());
                        yield (0, awardXP_1.awardXP)(referral.referred._id.toString(), "referral_bonus", referral._id.toString());
                        yield UserStats_1.default.findOneAndUpdate({ user: referral.referrer }, { $inc: { totalReferrals: 1 } }, { upsert: true });
                    }
                }
                catch (error) {
                    console.error(`Error processing referral ${referral._id}:`, error);
                }
            }
        });
    }
    static debugReferralSystem() {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, db_1.default)();
            const totalReferrals = yield Referral_1.default.countDocuments();
            const pendingReferrals = yield Referral_1.default.countDocuments({ status: "pending" });
            const completedReferrals = yield Referral_1.default.countDocuments({ status: "completed" });
            const expiredReferrals = yield Referral_1.default.countDocuments({ status: "expired" });
            const recentReferrals = yield Referral_1.default.find()
                .populate("referrer", "username")
                .populate("referred", "username")
                .sort({ createdAt: -1 })
                .limit(10);
            return {
                summary: {
                    total: totalReferrals,
                    pending: pendingReferrals,
                    completed: completedReferrals,
                    expired: expiredReferrals
                },
                recentReferrals: recentReferrals.map(r => {
                    var _a, _b;
                    return ({
                        id: r._id,
                        referrer: ((_a = r.referrer) === null || _a === void 0 ? void 0 : _a.username) || 'Unknown',
                        referred: ((_b = r.referred) === null || _b === void 0 ? void 0 : _b.username) || 'Unknown',
                        status: r.status,
                        code: r.referralCode,
                        createdAt: r.createdAt,
                        completedAt: r.completedAt
                    });
                })
            };
        });
    }
}
exports.ReferralSystemFixed = ReferralSystemFixed;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,