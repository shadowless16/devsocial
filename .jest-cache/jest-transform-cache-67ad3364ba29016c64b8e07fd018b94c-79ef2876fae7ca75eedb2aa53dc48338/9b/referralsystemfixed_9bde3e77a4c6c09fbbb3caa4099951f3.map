{"file":"C:\\Users\\akdav\\Downloads\\devsocial\\utils\\referral-system-fixed.ts","mappings":"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","names":[],"sources":["C:\\Users\\akdav\\Downloads\\devsocial\\utils\\referral-system-fixed.ts"],"sourcesContent":["import Referral from \"@/models/Referral\"\nimport User from \"@/models/User\"\nimport UserStats from \"@/models/UserStats\"\nimport { awardXP } from \"./awardXP\"\nimport connectDB from \"@/lib/db\"\n\nexport class ReferralSystemFixed {\n  static async getReferralCode(userId: string): Promise<string> {\n    await connectDB()\n    const user = await User.findById(userId)\n    if (!user) throw new Error(\"User not found\")\n\n    if (!user.referralCode) {\n      const timestamp = Date.now().toString(36)\n      const username = user.username.substring(0, 4).toUpperCase()\n      const random = Math.random().toString(36).substring(2, 6).toUpperCase()\n      user.referralCode = `${username}${timestamp}${random}`\n      await user.save()\n    }\n\n    return user.referralCode\n  }\n\n  static async validateReferralCode(referralCode: string): Promise<{ valid: boolean; referrer?: any }> {\n    await connectDB()\n    \n    if (!referralCode || referralCode.trim() === '') {\n      return { valid: false }\n    }\n\n    const referrer = await User.findOne({ referralCode: referralCode.trim() })\n    return { \n      valid: !!referrer, \n      referrer: referrer ? { id: referrer._id.toString(), username: referrer.username } : undefined \n    }\n  }\n\n  static async createReferral(referrerId: string, referredUserId: string, referralCode?: string): Promise<any> {\n    await connectDB()\n\n    // Prevent self-referral\n    if (referrerId === referredUserId) {\n      throw new Error(\"Cannot refer yourself\")\n    }\n\n    // Check if referral already exists\n    const existingReferral = await Referral.findOne({\n      $or: [\n        { referrer: referrerId, referred: referredUserId },\n        { referred: referredUserId } // Prevent multiple referrals for same user\n      ]\n    })\n\n    if (existingReferral) {\n      throw new Error(\"Referral already exists for this user\")\n    }\n\n    // Use provided code or get referrer's code\n    const finalReferralCode = referralCode || await this.getReferralCode(referrerId)\n\n    // Create referral with 30-day expiration\n    const expiresAt = new Date()\n    expiresAt.setDate(expiresAt.getDate() + 30)\n\n    const referral = new Referral({\n      referrer: referrerId,\n      referred: referredUserId,\n      referralCode: finalReferralCode,\n      expiresAt,\n      status: \"pending\",\n    })\n\n    await referral.save()\n    \n    // Immediately check if the referred user already meets completion criteria\n    await this.checkReferralCompletion(referredUserId)\n    \n    return referral\n  }\n\n  static async checkReferralCompletion(userId: string): Promise<void> {\n    await connectDB()\n\n    const pendingReferrals = await Referral.find({\n      referred: userId,\n      status: \"pending\",\n      expiresAt: { $gt: new Date() },\n    })\n\n    for (const referral of pendingReferrals) {\n      try {\n        const user = await User.findById(userId)\n        if (!user) continue\n\n        // Ensure UserStats exists\n        let userStats = await UserStats.findOne({ user: userId })\n        if (!userStats) {\n          userStats = await UserStats.create({\n            user: userId,\n            totalPosts: 0,\n            totalXP: user.points || 0,\n            totalReferrals: 0\n          })\n        }\n\n        // More lenient completion criteria: user has at least 25 XP (reduced from 50)\n        const hasMinimumActivity = userStats.totalXP >= 25\n\n        if (hasMinimumActivity) {\n          // Mark referral as completed\n          referral.status = \"completed\"\n          referral.completedAt = new Date()\n          referral.rewardsClaimed = true\n          await referral.save()\n\n          // Award XP to both users\n          await awardXP(referral.referrer.toString(), \"referral_success\", referral._id.toString())\n          await awardXP(userId, \"referral_bonus\", referral._id.toString())\n\n          // Update referral stats\n          await UserStats.findOneAndUpdate(\n            { user: referral.referrer }, \n            { $inc: { totalReferrals: 1 } }, \n            { upsert: true }\n          )\n\n          console.log(`Referral completed: ${referral._id}`)\n        }\n      } catch (error) {\n        console.error(`Error processing referral completion for ${userId}:`, error)\n      }\n    }\n  }\n\n  static async processReferralFromSignup(referralCode: string, newUserId: string): Promise<boolean> {\n    try {\n      await connectDB()\n      \n      const validation = await this.validateReferralCode(referralCode)\n      if (!validation.valid || !validation.referrer) {\n        console.log(`Invalid referral code: ${referralCode}`)\n        return false\n      }\n\n      // Create the referral\n      await this.createReferral(validation.referrer.id, newUserId, referralCode)\n      console.log(`Referral created: ${validation.referrer.username} -> new user ${newUserId}`)\n      return true\n    } catch (error) {\n      console.error(\"Error processing referral from signup:\", error)\n      return false\n    }\n  }\n\n  static async getReferralStats(userId: string): Promise<any> {\n    await connectDB()\n\n    // Check for any pending referrals that should be completed\n    await this.checkUserReferrals(userId)\n\n    const userObjectId = new User.base.Types.ObjectId(userId)\n    const stats = await Referral.aggregate([\n      { $match: { referrer: userObjectId } },\n      {\n        $group: {\n          _id: \"$status\",\n          count: { $sum: 1 },\n          totalRewards: { $sum: \"$referrerReward\" },\n        },\n      },\n    ])\n\n    const recentReferrals = await Referral.find({ referrer: userObjectId })\n      .populate(\"referred\", \"username displayName avatar\")\n      .sort({ createdAt: -1 })\n      .limit(10)\n\n    return {\n      stats: stats.reduce((acc, stat) => {\n        acc[stat._id] = { count: stat.count, rewards: stat.totalRewards }\n        return acc\n      }, {}),\n      recentReferrals,\n    }\n  }\n\n  static async expireOldReferrals(): Promise<void> {\n    await connectDB()\n\n    const result = await Referral.updateMany(\n      {\n        status: \"pending\",\n        expiresAt: { $lt: new Date() },\n      },\n      { status: \"expired\" },\n    )\n\n    console.log(`Expired ${result.modifiedCount} old referrals`)\n  }\n\n  static async checkUserReferrals(referrerId: string): Promise<void> {\n    await connectDB()\n\n    const pendingReferrals = await Referral.find({\n      referrer: referrerId,\n      status: \"pending\",\n      expiresAt: { $gt: new Date() },\n    }).populate(\"referred\", \"_id\")\n\n    for (const referral of pendingReferrals) {\n      try {\n        const referredUser = await User.findById(referral.referred._id)\n        if (!referredUser) continue\n\n        let userStats = await UserStats.findOne({ user: referral.referred._id })\n        if (!userStats) {\n          userStats = await UserStats.create({\n            user: referral.referred._id,\n            totalPosts: 0,\n            totalXP: referredUser.points || 0,\n            totalReferrals: 0\n          })\n        }\n\n        // Check completion criteria: at least 25 XP\n        if (userStats.totalXP >= 25) {\n          referral.status = \"completed\"\n          referral.completedAt = new Date()\n          referral.rewardsClaimed = true\n          await referral.save()\n\n          await awardXP(referral.referrer.toString(), \"referral_success\", referral._id.toString())\n          await awardXP(referral.referred._id.toString(), \"referral_bonus\", referral._id.toString())\n\n          await UserStats.findOneAndUpdate(\n            { user: referral.referrer },\n            { $inc: { totalReferrals: 1 } },\n            { upsert: true }\n          )\n        }\n      } catch (error) {\n        console.error(`Error processing referral ${referral._id}:`, error)\n      }\n    }\n  }\n\n  static async debugReferralSystem(): Promise<any> {\n    await connectDB()\n    \n    const totalReferrals = await Referral.countDocuments()\n    const pendingReferrals = await Referral.countDocuments({ status: \"pending\" })\n    const completedReferrals = await Referral.countDocuments({ status: \"completed\" })\n    const expiredReferrals = await Referral.countDocuments({ status: \"expired\" })\n    \n    const recentReferrals = await Referral.find()\n      .populate(\"referrer\", \"username\")\n      .populate(\"referred\", \"username\")\n      .sort({ createdAt: -1 })\n      .limit(10)\n    \n    return {\n      summary: {\n        total: totalReferrals,\n        pending: pendingReferrals,\n        completed: completedReferrals,\n        expired: expiredReferrals\n      },\n      recentReferrals: recentReferrals.map(r => ({\n        id: r._id,\n        referrer: r.referrer?.username || 'Unknown',\n        referred: r.referred?.username || 'Unknown',\n        status: r.status,\n        code: r.referralCode,\n        createdAt: r.createdAt,\n        completedAt: r.completedAt\n      }))\n    }\n  }\n}"],"version":3}