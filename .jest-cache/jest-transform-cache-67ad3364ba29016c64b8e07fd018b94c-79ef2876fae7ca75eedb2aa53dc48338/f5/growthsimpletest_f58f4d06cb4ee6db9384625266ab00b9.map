{"file":"C:\\Users\\akdav\\Downloads\\devsocial\\__tests__\\analytics\\growth-simple.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\akdav\\Downloads\\devsocial\\__tests__\\analytics\\growth-simple.test.ts"],"sourcesContent":["import mongoose from 'mongoose';\nimport User from '@/models/User';\n\ndescribe('Growth Analytics - Simple Tests', () => {\n  beforeAll(async () => {\n    const testDbUri = process.env.MONGODB_TEST_URI || process.env.MONGODB_URI + '_test';\n    await mongoose.connect(testDbUri);\n  });\n\n  afterAll(async () => {\n    await mongoose.disconnect();\n  });\n\n  beforeEach(async () => {\n    await User.deleteMany({});\n  });\n\n  describe('User Growth Calculations', () => {\n    it('should calculate growth rate correctly', async () => {\n      const now = new Date();\n      \n      // Create users in current period (last 30 days)\n      await User.create([\n        { \n          username: 'user1', \n          email: 'user1@test.com', \n          password: 'password123',\n          firstName: 'User',\n          lastName: 'One',\n          createdAt: new Date(now.getTime() - 5 * 24 * 60 * 60 * 1000) \n        },\n        { \n          username: 'user2', \n          email: 'user2@test.com', \n          password: 'password123',\n          firstName: 'User',\n          lastName: 'Two',\n          createdAt: new Date(now.getTime() - 10 * 24 * 60 * 60 * 1000) \n        }\n      ]);\n\n      // Create users in previous period (30-60 days ago)\n      await User.create([\n        { \n          username: 'user3', \n          email: 'user3@test.com', \n          password: 'password123',\n          firstName: 'User',\n          lastName: 'Three',\n          createdAt: new Date(now.getTime() - 35 * 24 * 60 * 60 * 1000) \n        }\n      ]);\n\n      // Calculate metrics manually\n      const totalUsers = await User.countDocuments();\n      \n      const thirtyDaysAgo = new Date(now);\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n      \n      const newUsers = await User.countDocuments({\n        createdAt: { $gte: thirtyDaysAgo, $lte: now }\n      });\n\n      const sixtyDaysAgo = new Date(now);\n      sixtyDaysAgo.setDate(sixtyDaysAgo.getDate() - 60);\n      \n      const previousUsers = await User.countDocuments({\n        createdAt: { $gte: sixtyDaysAgo, $lt: thirtyDaysAgo }\n      });\n\n      const growthRate = previousUsers > 0 ? \n        Math.round(((newUsers - previousUsers) / previousUsers) * 100) : 0;\n\n      expect(totalUsers).toBe(3);\n      expect(newUsers).toBe(2);\n      expect(previousUsers).toBe(1);\n      expect(growthRate).toBe(100); // 100% growth (2 vs 1)\n    });\n\n    it('should handle acquisition channels correctly', async () => {\n      const now = new Date();\n      \n      await User.create([\n        { \n          username: 'user1', \n          email: 'user1@test.com', \n          password: 'password123',\n          firstName: 'User',\n          lastName: 'One',\n          registrationSource: 'direct',\n          createdAt: now \n        },\n        { \n          username: 'user2', \n          email: 'user2@test.com', \n          password: 'password123',\n          firstName: 'User',\n          lastName: 'Two',\n          registrationSource: 'referral',\n          createdAt: now \n        },\n        { \n          username: 'user3', \n          email: 'user3@test.com', \n          password: 'password123',\n          firstName: 'User',\n          lastName: 'Three',\n          registrationSource: 'direct',\n          createdAt: now \n        }\n      ]);\n\n      // Test acquisition channel aggregation\n      const acquisitionData = await User.aggregate([\n        { $match: { createdAt: { $gte: new Date(now.getTime() - 24 * 60 * 60 * 1000), $lte: now } } },\n        { $group: { _id: '$registrationSource', count: { $sum: 1 } } }\n      ]);\n\n      const totalNewUsers = acquisitionData.reduce((sum, item) => sum + item.count, 0);\n      const acquisitionChannels = acquisitionData.map(item => ({\n        channel: item._id || 'direct',\n        users: item.count,\n        percentage: Math.round((item.count / Math.max(totalNewUsers, 1)) * 100)\n      }));\n\n      expect(acquisitionChannels).toHaveLength(2);\n      expect(acquisitionChannels.find(c => c.channel === 'direct')?.users).toBe(2);\n      expect(acquisitionChannels.find(c => c.channel === 'referral')?.users).toBe(1);\n      expect(totalNewUsers).toBe(3);\n    });\n\n    it('should handle empty database gracefully', async () => {\n      const totalUsers = await User.countDocuments();\n      const newUsers = await User.countDocuments({\n        createdAt: { $gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) }\n      });\n\n      expect(totalUsers).toBe(0);\n      expect(newUsers).toBe(0);\n    });\n  });\n\n  describe('MCP Integration Test', () => {\n    it('should work with MCP API endpoint', async () => {\n      // Create test data\n      const now = new Date();\n      await User.create([\n        { \n          username: 'testuser1', \n          email: 'test1@test.com', \n          password: 'password123',\n          firstName: 'Test',\n          lastName: 'User',\n          registrationSource: 'direct',\n          createdAt: new Date(now.getTime() - 5 * 24 * 60 * 60 * 1000) \n        }\n      ]);\n\n      // Test the database queries that MCP would use\n      const totalUsers = await User.countDocuments();\n      const thirtyDaysAgo = new Date(now);\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n      \n      const newUsers = await User.countDocuments({\n        createdAt: { $gte: thirtyDaysAgo, $lte: now }\n      });\n\n      expect(totalUsers).toBe(1);\n      expect(newUsers).toBe(1);\n    });\n  });\n});"],"version":3}