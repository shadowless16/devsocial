{"file":"C:\\Users\\akdav\\Downloads\\devsocial\\utils\\response.ts","mappings":";AAAA,6CAA6C;;AA+C7C,0CAQC;AAQD,sCAQC;AAOD,0DAWC;AAvFD,6DAA6D;AAC7D,8BAA8B;AAC9B,QAAQ;AACR,uBAAuB;AACvB,cAAc;AACd,SAAS;AACT,kBAAkB;AAClB,MAAM;AACN,IAAI;AAEJ,+EAA+E;AAC/E,8BAA8B;AAC9B,QAAQ;AACR,wBAAwB;AACxB,iBAAiB;AACjB,gBAAgB;AAChB,SAAS;AACT,kBAAkB;AAClB,MAAM;AACN,IAAI;AAEJ,yDAAyD;AACzD,8BAA8B;AAC9B,QAAQ;AACR,wBAAwB;AACxB,sCAAsC;AACtC,gBAAgB;AAChB,SAAS;AACT,uBAAuB;AACvB,MAAM;AACN,IAAI;AAEJ,oBAAoB;AACpB,wCAA2C;AAM3C;;;;;GAKG;AACH,SAAgB,eAAe,CAAC,IAAkB,EAAE,SAAiB,GAAG;IACtE,OAAO,qBAAY,CAAC,IAAI,CACtB;QACE,OAAO,EAAE,IAAI;QACb,IAAI;KACL,EACD,EAAE,MAAM,EAAE,CACX,CAAC;AACJ,CAAC;AAED;;;;;GAKG;AACH,SAAgB,aAAa,CAAC,OAAe,EAAE,SAAiB,GAAG;IACjE,OAAO,qBAAY,CAAC,IAAI,CACtB;QACE,OAAO,EAAE,KAAK;QACd,KAAK,EAAE,EAAE,OAAO,EAAE;KACnB,EACD,EAAE,MAAM,EAAE,CACX,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,SAAgB,uBAAuB,CAAC,MAAW,EAAE,SAAiB,GAAG;IACvE,OAAO,qBAAY,CAAC,IAAI,CACtB;QACE,OAAO,EAAE,KAAK;QACd,KAAK,EAAE;YACL,OAAO,EAAE,mBAAmB;YAC5B,OAAO,EAAE,MAAM;SAChB;KACF,EACD,EAAE,MAAM,EAAE,CACX,CAAC;AACJ,CAAC","names":[],"sources":["C:\\Users\\akdav\\Downloads\\devsocial\\utils\\response.ts"],"sourcesContent":["// import { NextResponse } from \"next/server\"\n\n// export function successResponse(data: any, status = 200) {\n//   return NextResponse.json(\n//     {\n//       success: true,\n//       data,\n//     },\n//     { status },\n//   )\n// }\n\n// export function errorResponse(message: string, status = 400, errors?: any) {\n//   return NextResponse.json(\n//     {\n//       success: false,\n//       message,\n//       errors,\n//     },\n//     { status },\n//   )\n// }\n\n// export function validationErrorResponse(errors: any) {\n//   return NextResponse.json(\n//     {\n//       success: false,\n//       message: \"Validation failed\",\n//       errors,\n//     },\n//     { status: 400 },\n//   )\n// }\n\n// utils/response.ts\nimport { NextResponse } from \"next/server\";\n\ninterface ResponseData {\n  [key: string]: any;\n}\n\n/**\n * Creates a standardized success response.\n * @param data - The payload to send.\n * @param status - The HTTP status code (default: 200).\n * @returns A JSON response object.\n */\nexport function successResponse(data: ResponseData, status: number = 200) {\n  return NextResponse.json(\n    {\n      success: true,\n      data,\n    },\n    { status }\n  );\n}\n\n/**\n * Creates a standardized error response.\n * @param message - The error message.\n * @param status - The HTTP status code (default: 500).\n * @returns A JSON response object.\n */\nexport function errorResponse(message: string, status: number = 500) {\n  return NextResponse.json(\n    {\n      success: false,\n      error: { message },\n    },\n    { status }\n  );\n}\n\n/**\n * Creates a standardized validation error response.\n * @param errors - The formatted Zod errors.\n * @returns A JSON response object.\n */\nexport function validationErrorResponse(errors: any, status: number = 400) {\n  return NextResponse.json(\n    {\n      success: false,\n      error: {\n        message: \"Validation failed\",\n        details: errors,\n      },\n    },\n    { status }\n  );\n}\n"],"version":3}