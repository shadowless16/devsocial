{"file":"C:\\Users\\akdav\\Downloads\\devsocial\\__tests__\\referrals\\referral-system.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\akdav\\Downloads\\devsocial\\__tests__\\referrals\\referral-system.test.ts"],"sourcesContent":["import { describe, it, expect, beforeAll, afterAll, beforeEach } from '@jest/globals'\nimport mongoose from 'mongoose'\nimport User from '../../models/User'\nimport Referral from '../../models/Referral'\nimport UserStats from '../../models/UserStats'\nimport { ReferralSystem } from '../../utils/referral-system'\nimport { awardXP } from '../../utils/awardXP'\n\nbeforeAll(async () => {\n  const testDbUri = process.env.MONGODB_TEST_URI || process.env.MONGODB_URI + '_test'\n  await mongoose.connect(testDbUri)\n}, 60000)\n\nafterAll(async () => {\n  await mongoose.disconnect()\n})\n\nbeforeEach(async () => {\n  await User.deleteMany({ email: { $regex: /@example\\.com$/ } })\n  await Referral.deleteMany({})\n  await UserStats.deleteMany({})\n})\n\ndescribe('ReferralSystem', () => {\n  describe('getReferralCode', () => {\n    it('should return existing referral code', async () => {\n      const user = await User.create({\n        username: 'testuser',\n        email: 'test@example.com',\n        password: 'hashedpassword',\n        referralCode: 'EXISTING123'\n      })\n\n      const code = await ReferralSystem.getReferralCode(user._id.toString())\n      expect(code).toBe('EXISTING123')\n    })\n\n    it('should generate referral code if missing', async () => {\n      const user = await User.create({\n        username: 'testuser',\n        email: 'test@example.com',\n        password: 'hashedpassword'\n      })\n\n      // Remove referral code to simulate old user\n      await User.findByIdAndUpdate(user._id, { $unset: { referralCode: 1 } })\n\n      const code = await ReferralSystem.getReferralCode(user._id.toString())\n      expect(code).toBeDefined()\n      expect(code).toMatch(/^TEST[A-Za-z0-9]+$/) // Should start with first 4 chars of username\n    })\n\n    it('should throw error for non-existent user', async () => {\n      const fakeId = new mongoose.Types.ObjectId().toString()\n      await expect(ReferralSystem.getReferralCode(fakeId)).rejects.toThrow('User not found')\n    })\n  })\n\n  describe('createReferral', () => {\n    let referrer: any, referred: any\n\n    beforeEach(async () => {\n      referrer = await User.create({\n        username: 'referrer',\n        email: 'referrer@example.com',\n        password: 'hashedpassword',\n        referralCode: 'REF123'\n      })\n\n      referred = await User.create({\n        username: 'referred',\n        email: 'referred@example.com',\n        password: 'hashedpassword'\n      })\n    })\n\n    it('should create a new referral successfully', async () => {\n      const referral = await ReferralSystem.createReferral(\n        referrer._id.toString(),\n        referred._id.toString()\n      )\n\n      expect(referral).toBeDefined()\n      expect(referral.referrer.toString()).toBe(referrer._id.toString())\n      expect(referral.referred.toString()).toBe(referred._id.toString())\n      expect(referral.referralCode).toBe('REF123')\n      expect(referral.status).toBe('pending')\n      expect(referral.expiresAt).toBeInstanceOf(Date)\n    })\n\n    it('should throw error for duplicate referral', async () => {\n      await ReferralSystem.createReferral(\n        referrer._id.toString(),\n        referred._id.toString()\n      )\n\n      await expect(\n        ReferralSystem.createReferral(\n          referrer._id.toString(),\n          referred._id.toString()\n        )\n      ).rejects.toThrow('Referral already exists')\n    })\n\n    it('should set expiration date 30 days from now', async () => {\n      const referral = await ReferralSystem.createReferral(\n        referrer._id.toString(),\n        referred._id.toString()\n      )\n\n      const expectedExpiry = new Date()\n      expectedExpiry.setDate(expectedExpiry.getDate() + 30)\n      \n      const timeDiff = Math.abs(referral.expiresAt.getTime() - expectedExpiry.getTime())\n      expect(timeDiff).toBeLessThan(1000) // Within 1 second\n    })\n  })\n\n  describe('checkReferralCompletion', () => {\n    let referrer: any, referred: any, referral: any\n\n    beforeEach(async () => {\n      referrer = await User.create({\n        username: 'referrer',\n        email: 'referrer@example.com',\n        password: 'hashedpassword',\n        referralCode: 'REF123',\n        points: 100\n      })\n\n      referred = await User.create({\n        username: 'referred',\n        email: 'referred@example.com',\n        password: 'hashedpassword',\n        points: 10\n      })\n\n      referral = await ReferralSystem.createReferral(\n        referrer._id.toString(),\n        referred._id.toString()\n      )\n\n      // Create UserStats for referred user\n      await UserStats.create({\n        user: referred._id,\n        totalPosts: 0,\n        totalXP: 10,\n        totalReferrals: 0\n      })\n    })\n\n    it('should complete referral when user meets criteria', async () => {\n      // Update user stats to meet completion criteria\n      await UserStats.findOneAndUpdate(\n        { user: referred._id },\n        { totalPosts: 1, totalXP: 60 }\n      )\n\n      await ReferralSystem.checkReferralCompletion(referred._id.toString())\n\n      const updatedReferral = await Referral.findById(referral._id)\n      expect(updatedReferral?.status).toBe('completed')\n      expect(updatedReferral?.completedAt).toBeInstanceOf(Date)\n      expect(updatedReferral?.rewardsClaimed).toBe(true)\n\n      // Check XP was awarded\n      const updatedReferrer = await User.findById(referrer._id)\n      const updatedReferred = await User.findById(referred._id)\n      \n      expect(updatedReferrer?.points).toBeGreaterThan(100) // Should have bonus XP\n      expect(updatedReferred?.points).toBeGreaterThan(10) // Should have bonus XP\n    })\n\n    it('should not complete referral when user does not meet criteria', async () => {\n      // User has posts but not enough XP\n      await UserStats.findOneAndUpdate(\n        { user: referred._id },\n        { totalPosts: 1, totalXP: 30 }\n      )\n\n      await ReferralSystem.checkReferralCompletion(referred._id.toString())\n\n      const updatedReferral = await Referral.findById(referral._id)\n      expect(updatedReferral?.status).toBe('pending')\n    })\n\n    it('should handle missing UserStats gracefully', async () => {\n      // Delete UserStats\n      await UserStats.deleteOne({ user: referred._id })\n\n      await expect(\n        () => ReferralSystem.checkReferralCompletion(referred._id.toString())\n      ).not.toThrow()\n\n      const updatedReferral = await Referral.findById(referral._id)\n      expect(updatedReferral?.status).toBe('pending')\n    })\n  })\n\n  describe('getReferralStats', () => {\n    let referrer: any, referred1: any, referred2: any\n\n    beforeEach(async () => {\n      referrer = await User.create({\n        username: 'referrer',\n        email: 'referrer@example.com',\n        password: 'hashedpassword',\n        referralCode: 'REF123'\n      })\n\n      referred1 = await User.create({\n        username: 'referred1',\n        email: 'referred1@example.com',\n        password: 'hashedpassword'\n      })\n\n      referred2 = await User.create({\n        username: 'referred2',\n        email: 'referred2@example.com',\n        password: 'hashedpassword'\n      })\n\n      // Create referrals with unique codes\n      await Referral.create({\n        referrer: referrer._id,\n        referred: referred1._id,\n        referralCode: `REF123_${Date.now()}_1`,\n        status: 'completed',\n        completedAt: new Date(),\n        expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n        referrerReward: 25\n      })\n\n      await Referral.create({\n        referrer: referrer._id,\n        referred: referred2._id,\n        referralCode: `REF123_${Date.now()}_2`,\n        status: 'pending',\n        expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n        referrerReward: 25\n      })\n    })\n\n    it('should return correct referral statistics', async () => {\n      const stats = await ReferralSystem.getReferralStats(referrer._id.toString())\n\n      expect(stats).toBeDefined()\n      expect(stats.stats).toBeDefined()\n      expect(stats.recentReferrals).toBeDefined()\n\n      // Check stats structure\n      expect(stats.stats.completed?.count).toBe(1)\n      expect(stats.stats.completed?.rewards).toBe(25)\n      expect(stats.stats.pending?.count).toBe(1)\n      expect(stats.stats.pending?.rewards).toBe(25)\n\n      // Check recent referrals\n      expect(stats.recentReferrals).toHaveLength(2)\n    })\n\n    it('should handle user with no referrals', async () => {\n      const newUser = await User.create({\n        username: 'newuser',\n        email: 'newuser@example.com',\n        password: 'hashedpassword'\n      })\n\n      const stats = await ReferralSystem.getReferralStats(newUser._id.toString())\n\n      expect(stats.stats).toEqual({})\n      expect(stats.recentReferrals).toHaveLength(0)\n    })\n  })\n\n  describe('expireOldReferrals', () => {\n    it('should expire old pending referrals', async () => {\n      const referrer = await User.create({\n        username: 'referrer',\n        email: 'referrer@example.com',\n        password: 'hashedpassword',\n        referralCode: 'REF123'\n      })\n\n      const referred = await User.create({\n        username: 'referred',\n        email: 'referred@example.com',\n        password: 'hashedpassword'\n      })\n\n      // Create expired referral\n      const expiredDate = new Date(Date.now() - 24 * 60 * 60 * 1000) // 1 day ago\n      await Referral.create({\n        referrer: referrer._id,\n        referred: referred._id,\n        referralCode: 'REF123',\n        status: 'pending',\n        expiresAt: expiredDate\n      })\n\n      await ReferralSystem.expireOldReferrals()\n\n      const expiredReferral = await Referral.findOne({\n        referrer: referrer._id,\n        referred: referred._id\n      })\n\n      expect(expiredReferral?.status).toBe('expired')\n    })\n\n    it('should not expire non-expired referrals', async () => {\n      const referrer = await User.create({\n        username: 'referrer',\n        email: 'referrer@example.com',\n        password: 'hashedpassword',\n        referralCode: 'REF123'\n      })\n\n      const referred = await User.create({\n        username: 'referred',\n        email: 'referred@example.com',\n        password: 'hashedpassword'\n      })\n\n      // Create non-expired referral\n      const futureDate = new Date(Date.now() + 24 * 60 * 60 * 1000) // 1 day from now\n      await Referral.create({\n        referrer: referrer._id,\n        referred: referred._id,\n        referralCode: 'REF123',\n        status: 'pending',\n        expiresAt: futureDate\n      })\n\n      await ReferralSystem.expireOldReferrals()\n\n      const referral = await Referral.findOne({\n        referrer: referrer._id,\n        referred: referred._id\n      })\n\n      expect(referral?.status).toBe('pending')\n    })\n  })\n\n  describe('Integration with XP System', () => {\n    let referrer: any, referred: any\n\n    beforeEach(async () => {\n      referrer = await User.create({\n        username: 'referrer',\n        email: 'referrer@example.com',\n        password: 'hashedpassword',\n        referralCode: 'REF123',\n        points: 100\n      })\n\n      referred = await User.create({\n        username: 'referred',\n        email: 'referred@example.com',\n        password: 'hashedpassword',\n        points: 10\n      })\n\n      await ReferralSystem.createReferral(\n        referrer._id.toString(),\n        referred._id.toString()\n      )\n\n      // Create UserStats\n      await UserStats.create({\n        user: referred._id,\n        totalPosts: 0,\n        totalXP: 10,\n        totalReferrals: 0\n      })\n    })\n\n    it('should complete referral when user gains XP through posts', async () => {\n      // Simulate user creating posts and gaining XP\n      await UserStats.findOneAndUpdate(\n        { user: referred._id },\n        { $inc: { totalPosts: 1, totalXP: 50 } }\n      )\n\n      // Award XP which should trigger referral check\n      await awardXP(referred._id.toString(), 'post_creation')\n\n      const referral = await Referral.findOne({\n        referrer: referrer._id,\n        referred: referred._id\n      })\n\n      expect(referral?.status).toBe('completed')\n    })\n  })\n})"],"version":3}