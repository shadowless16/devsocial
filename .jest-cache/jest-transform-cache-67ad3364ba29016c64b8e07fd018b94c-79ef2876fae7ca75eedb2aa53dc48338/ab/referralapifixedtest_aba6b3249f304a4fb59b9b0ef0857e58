fd5219cbb34c5204cef5baf13043e8c8
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock the auth middleware
globals_1.jest.mock('../../lib/auth', () => ({
    auth: globals_1.jest.fn()
}));
const server_1 = require("next/server");
const mongoose_1 = __importDefault(require("mongoose"));
const User_1 = __importDefault(require("../../models/User"));
const Referral_1 = __importDefault(require("../../models/Referral"));
const route_1 = require("../../app/api/referrals/create/route");
const route_2 = require("../../app/api/referrals/stats/route");
const auth_1 = require("../../lib/auth");
const mockedAuth = auth_1.auth;
(0, globals_1.beforeAll)(() => __awaiter(void 0, void 0, void 0, function* () {
    const testDbUri = process.env.MONGODB_TEST_URI || process.env.MONGODB_URI + '_test';
    yield mongoose_1.default.connect(testDbUri);
    // Setup default auth mock
    mockedAuth.mockResolvedValue({ user: { id: 'mockUserId' } });
}), 60000);
(0, globals_1.afterAll)(() => __awaiter(void 0, void 0, void 0, function* () {
    yield mongoose_1.default.disconnect();
}));
(0, globals_1.beforeEach)(() => __awaiter(void 0, void 0, void 0, function* () {
    // Clean up test data - be careful with this approach in production!
    yield User_1.default.deleteMany({ email: { $regex: /@example\.com$/ } });
    yield Referral_1.default.deleteMany({});
    // Reset auth mock to default
    mockedAuth.mockResolvedValue({ user: { id: 'mockUserId' } });
}));
(0, globals_1.describe)('Referral API Endpoints', () => {
    (0, globals_1.describe)('GET /api/referrals/create', () => {
        (0, globals_1.it)('should return referral code for authenticated user', () => __awaiter(void 0, void 0, void 0, function* () {
            const user = yield User_1.default.create({
                _id: 'mockUserId',
                username: 'testuser',
                email: 'test@example.com',
                password: 'hashedpassword',
                referralCode: 'TEST123',
            });
            const request = new server_1.NextRequest('http://localhost/api/referrals/create');
            const response = yield (0, route_1.GET)(request);
            const data = yield response.json();
            (0, globals_1.expect)(response.status).toBe(200);
            (0, globals_1.expect)(data.success).toBe(true);
            (0, globals_1.expect)(data.data.referralCode).toBe('TEST123');
        }));
        (0, globals_1.it)('should return 401 for unauthenticated request', () => __awaiter(void 0, void 0, void 0, function* () {
            mockedAuth.mockResolvedValueOnce({ user: null });
            const request = new server_1.NextRequest('http://localhost/api/referrals/create');
            const response = yield (0, route_1.GET)(request);
            const data = yield response.json();
            (0, globals_1.expect)(response.status).toBe(401);
            (0, globals_1.expect)(data.success).toBe(false);
        }));
    });
    (0, globals_1.describe)('POST /api/referrals/create', () => {
        let referrer, referred;
        (0, globals_1.beforeEach)(() => __awaiter(void 0, void 0, void 0, function* () {
            referrer = yield User_1.default.create({
                _id: 'mockUserId',
                username: 'referrer',
                email: 'referrer@example.com',
                password: 'hashedpassword',
                referralCode: 'REF123',
            });
            referred = yield User_1.default.create({
                username: 'referred',
                email: 'referred@example.com',
                password: 'hashedpassword',
            });
        }));
        (0, globals_1.it)('should create referral successfully', () => __awaiter(void 0, void 0, void 0, function* () {
            const request = new server_1.NextRequest('http://localhost/api/referrals/create', {
                method: 'POST',
                body: JSON.stringify({ referredUserId: referred._id.toString() }),
            });
            const response = yield (0, route_1.POST)(request);
            const data = yield response.json();
            (0, globals_1.expect)(response.status).toBe(201);
            (0, globals_1.expect)(data.success).toBe(true);
            (0, globals_1.expect)(data.data.referral).toBeDefined();
            (0, globals_1.expect)(data.data.referral.status).toBe('pending');
        }));
        (0, globals_1.it)('should return 400 for missing referredUserId', () => __awaiter(void 0, void 0, void 0, function* () {
            const request = new server_1.NextRequest('http://localhost/api/referrals/create', {
                method: 'POST',
                body: JSON.stringify({}),
            });
            const response = yield (0, route_1.POST)(request);
            const data = yield response.json();
            (0, globals_1.expect)(response.status).toBe(400);
            (0, globals_1.expect)(data.success).toBe(false);
            (0, globals_1.expect)(data.message).toBe('Referred user ID is required');
        }));
        (0, globals_1.it)('should return 400 for self-referral', () => __awaiter(void 0, void 0, void 0, function* () {
            const request = new server_1.NextRequest('http://localhost/api/referrals/create', {
                method: 'POST',
                body: JSON.stringify({ referredUserId: referrer._id.toString() }),
            });
            const response = yield (0, route_1.POST)(request);
            const data = yield response.json();
            (0, globals_1.expect)(response.status).toBe(400);
            (0, globals_1.expect)(data.success).toBe(false);
            (0, globals_1.expect)(data.message).toBe('Cannot refer yourself');
        }));
        (0, globals_1.it)('should return 409 if referral already exists', () => __awaiter(void 0, void 0, void 0, function* () {
            yield Referral_1.default.create({
                referrer: referrer._id,
                referred: referred._id,
                referralCode: 'REF123',
                status: 'pending',
            });
            const request = new server_1.NextRequest('http://localhost/api/referrals/create', {
                method: 'POST',
                body: JSON.stringify({ referredUserId: referred._id.toString() }),
            });
            const response = yield (0, route_1.POST)(request);
            const data = yield response.json();
            (0, globals_1.expect)(response.status).toBe(409);
            (0, globals_1.expect)(data.success).toBe(false);
            (0, globals_1.expect)(data.message).toBe('Referral already exists');
        }));
    });
    (0, globals_1.describe)('GET /api/referrals/stats', () => {
        let referrer, referred1, referred2;
        (0, globals_1.beforeEach)(() => __awaiter(void 0, void 0, void 0, function* () {
            referrer = yield User_1.default.create({
                _id: 'mockUserId',
                username: 'referrer',
                email: 'referrer@example.com',
                password: 'hashedpassword',
                referralCode: 'REF123',
            });
            referred1 = yield User_1.default.create({
                username: 'referred1',
                email: 'referred1@example.com',
                password: 'hashedpassword',
            });
            referred2 = yield User_1.default.create({
                username: 'referred2',
                email: 'referred2@example.com',
                password: 'hashedpassword',
            });
            yield Referral_1.default.create({
                referrer: referrer._id,
                referred: referred1._id,
                referralCode: 'REF123',
                status: 'completed',
            });
            yield Referral_1.default.create({
                referrer: referrer._id,
                referred: referred2._id,
                referralCode: 'REF123',
                status: 'pending',
            });
        }));
        (0, globals_1.it)('should return referral statistics', () => __awaiter(void 0, void 0, void 0, function* () {
            const request = new server_1.NextRequest('http://localhost/api/referrals/stats');
            const response = yield (0, route_2.GET)(request);
            const data = yield response.json();
            (0, globals_1.expect)(response.status).toBe(200);
            (0, globals_1.expect)(data.success).toBe(true);
            (0, globals_1.expect)(data.data.stats).toBeDefined();
            (0, globals_1.expect)(data.data.recentReferrals).toBeDefined();
            (0, globals_1.expect)(data.data.recentReferrals.length).toBe(2);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,