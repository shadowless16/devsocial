{"file":"C:\\Users\\akdav\\Downloads\\devsocial\\utils\\awardXP.ts","mappings":"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","names":[],"sources":["C:\\Users\\akdav\\Downloads\\devsocial\\utils\\awardXP.ts"],"sourcesContent":["import User from \"@/models/User\"\nimport XPLog from \"@/models/XPLog\"\nimport connectDB from \"@/lib/db\"\nimport { ReferralSystem } from \"./referral-system\"\n\n// XP values for different actions\nexport const XP_VALUES = {\n  daily_login: 10,\n  post_creation: 20,\n  comment_creation: 5,\n  like_given: 2,  // Small XP for likes to prevent spam\n  like_received: 3,  // Slightly more XP when receiving likes\n  first_post: 50,\n  first_comment: 25,\n  poll_interaction: 5,\n  badge_earned: 100,\n  level_up: 200,\n  moderator_action_bonus: 50,\n  referral_success: 25,  // XP for successful referral (referrer)\n  referral_bonus: 15,    // XP for being referred (new user)\n  email_verified: 10,\n  user_followed: 5,\n  challenge_completion: 75,\n}\n\nexport async function awardXP(\n  userId: string,\n  type: keyof typeof XP_VALUES,\n  refId?: string,\n): Promise<{ success: boolean; newLevel?: number; levelUp?: boolean }> {\n  try {\n    // await connectDB() // Remove in tests, connection already exists\n\n    const xpAmount = XP_VALUES[type]\n    if (!xpAmount) {\n      throw new Error(`Invalid XP type: ${type}`)\n    }\n\n    // Create XP log entry\n    await XPLog.create({\n      userId,\n      type,\n      xpAmount,\n      refId: refId || undefined,\n    })\n\n    // Update user points\n    const user = await User.findById(userId)\n    if (!user) {\n      throw new Error(\"User not found\")\n    }\n\n    const oldLevel = user.level\n    user.points += xpAmount\n\n    // Level will be automatically calculated in the pre-save hook\n    await user.save()\n\n    const levelUp = user.level > oldLevel\n\n    // Award additional XP for leveling up\n    if (levelUp) {\n      await XPLog.create({\n        userId,\n        type: \"level_up\",\n        xpAmount: XP_VALUES.level_up,\n      })\n\n      user.points += XP_VALUES.level_up\n      await user.save()\n    }\n\n    // Check if this XP gain completes any pending referrals\n    // Don't check for referral-related XP types to avoid infinite loops\n    if (type !== \"referral_success\" && type !== \"referral_bonus\") {\n      try {\n        await ReferralSystem.checkReferralCompletion(userId)\n      } catch (error) {\n        console.error(\"Error checking referral completion:\", error)\n        // Don't fail the XP award if referral check fails\n      }\n    }\n\n    return {\n      success: true,\n      newLevel: user.level,\n      levelUp,\n    }\n  } catch (error) {\n    console.error(\"Error awarding XP:\", error)\n    return { success: false }\n  }\n}\n\nexport async function checkFirstTimeAction(userId: string, type: \"post\" | \"comment\"): Promise<boolean> {\n  try {\n    // await connectDB() // Remove in tests, connection already exists\n\n    const logType = type === \"post\" ? \"post_creation\" : \"comment_creation\"\n    const existingLog = await XPLog.findOne({ userId, type: logType })\n\n    return !existingLog\n  } catch (error) {\n    console.error(\"Error checking first time action:\", error)\n    return false\n  }\n}\n"],"version":3}