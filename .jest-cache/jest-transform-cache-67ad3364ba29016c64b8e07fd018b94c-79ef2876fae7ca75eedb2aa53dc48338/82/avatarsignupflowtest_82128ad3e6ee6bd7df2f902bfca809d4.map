{"file":"C:\\Users\\akdav\\Downloads\\devsocial\\__tests__\\avatar\\avatar-signup-flow.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\akdav\\Downloads\\devsocial\\__tests__\\avatar\\avatar-signup-flow.test.ts"],"sourcesContent":["import { describe, it, expect, beforeAll, afterAll, beforeEach, jest } from '@jest/globals';\nimport { NextRequest } from 'next/server';\nimport mongoose from 'mongoose';\nimport User from '../../models/User';\nimport { POST as signupRoute } from '../../app/api/auth/signup/route';\nimport { PUT as onboardingRoute } from '../../app/api/users/onboarding/route';\nimport { POST as saveAvatarRoute } from '../../app/api/save-avatar/route';\n\n// Mock dependencies\njest.mock('../../utils/awardXP', () => ({\n  awardXP: jest.fn().mockResolvedValue({ success: true })\n}));\n\njest.mock('../../utils/referral-system-fixed', () => ({\n  ReferralSystemFixed: {\n    processReferralFromSignup: jest.fn().mockResolvedValue(true)\n  }\n}));\n\njest.mock('../../models/Follow', () => ({\n  create: jest.fn().mockResolvedValue({})\n}));\n\njest.mock('next-auth', () => ({\n  getServerSession: jest.fn()\n}));\n\nimport { getServerSession } from 'next-auth';\nconst mockedGetServerSession = getServerSession as jest.MockedFunction<typeof getServerSession>;\n\nlet testUserId: string;\n\nbeforeAll(async () => {\n  const testDbUri = process.env.MONGODB_TEST_URI || process.env.MONGODB_URI + '_test';\n  await mongoose.connect(testDbUri);\n}, 60000);\n\nafterAll(async () => {\n  await mongoose.disconnect();\n});\n\nbeforeEach(async () => {\n  // Clean up test data\n  await User.deleteMany({ email: { $regex: /@avatartest\\.com$/ } });\n  \n  // Reset mocks\n  mockedGetServerSession.mockReset();\n});\n\ndescribe('Avatar Creation During Signup Flow', () => {\n  describe('Initial Avatar Generation', () => {\n    it('should create user with initial avatar during signup', async () => {\n      const signupData = {\n        username: 'avataruser',\n        email: 'avataruser@avatartest.com',\n        password: 'Password123!',\n        firstName: 'Avatar',\n        lastName: 'User',\n        birthMonth: 5,\n        birthDay: 15,\n        affiliation: 'Test University'\n      };\n\n      const request = new NextRequest('http://localhost/api/auth/signup', {\n        method: 'POST',\n        body: JSON.stringify(signupData),\n      });\n\n      const response = await signupRoute(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(201);\n      expect(data.success).toBe(true);\n      expect(data.data.user.avatar).toBeDefined();\n      expect(data.data.user.avatar).toContain('avataruser'); // Should contain username\n\n      // Verify user was created in database with avatar\n      const user = await User.findOne({ email: signupData.email });\n      expect(user).toBeTruthy();\n      expect(user?.avatar).toBeDefined();\n      expect(user?.avatar).toBe(data.data.user.avatar);\n\n      testUserId = user!._id.toString();\n    });\n\n    it('should generate different avatars for different usernames', async () => {\n      const users = [\n        { username: 'user1', email: 'user1@avatartest.com' },\n        { username: 'user2', email: 'user2@avatartest.com' }\n      ];\n\n      const avatars: string[] = [];\n\n      for (const userData of users) {\n        const signupData = {\n          ...userData,\n          password: 'Password123!',\n          firstName: 'Test',\n          lastName: 'User',\n          birthMonth: 5,\n          birthDay: 15,\n          affiliation: 'Test University'\n        };\n\n        const request = new NextRequest('http://localhost/api/auth/signup', {\n          method: 'POST',\n          body: JSON.stringify(signupData),\n        });\n\n        const response = await signupRoute(request);\n        const data = await response.json();\n\n        expect(response.status).toBe(201);\n        avatars.push(data.data.user.avatar);\n      }\n\n      // Avatars should be different\n      expect(avatars[0]).not.toBe(avatars[1]);\n    });\n  });\n\n  describe('Avatar Update During Onboarding', () => {\n    beforeEach(async () => {\n      // Create a test user first\n      const user = await User.create({\n        username: 'onboardinguser',\n        email: 'onboarding@avatartest.com',\n        password: 'hashedpassword',\n        firstName: 'Onboarding',\n        lastName: 'User',\n        birthMonth: 5,\n        birthDay: 15,\n        affiliation: 'Test University',\n        avatar: 'initial-avatar-url'\n      });\n      testUserId = user._id.toString();\n\n      // Mock session\n      mockedGetServerSession.mockResolvedValue({\n        user: { id: testUserId, email: 'onboarding@avatartest.com' }\n      } as any);\n    });\n\n    it('should update avatar with Ready Player Me URL during onboarding', async () => {\n      const onboardingData = {\n        gender: 'male',\n        userType: 'developer',\n        bio: 'Test bio',\n        avatar: 'https://models.readyplayer.me/64f123abc456def789.glb'\n      };\n\n      const request = new NextRequest('http://localhost/api/users/onboarding', {\n        method: 'PUT',\n        body: JSON.stringify(onboardingData),\n      });\n\n      const response = await onboardingRoute(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n\n      // Verify avatar was updated in database\n      const user = await User.findById(testUserId);\n      expect(user?.avatar).toBe(onboardingData.avatar);\n      expect(user?.onboardingCompleted).toBe(true);\n    });\n\n    it('should generate gender-specific avatar if no RPM avatar provided', async () => {\n      const onboardingData = {\n        gender: 'female',\n        userType: 'designer',\n        bio: 'Test bio'\n        // No avatar provided\n      };\n\n      const request = new NextRequest('http://localhost/api/users/onboarding', {\n        method: 'PUT',\n        body: JSON.stringify(onboardingData),\n      });\n\n      const response = await onboardingRoute(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n\n      // Verify gender-specific avatar was generated\n      const user = await User.findById(testUserId);\n      expect(user?.avatar).toBeDefined();\n      expect(user?.avatar).not.toBe('initial-avatar-url'); // Should be updated\n      expect(user?.gender).toBe('female');\n    });\n\n    it('should preserve RPM avatar over gender generation', async () => {\n      const rpmAvatar = 'https://models.readyplayer.me/64f123abc456def789.glb';\n      const onboardingData = {\n        gender: 'male',\n        userType: 'developer',\n        bio: 'Test bio',\n        avatar: rpmAvatar\n      };\n\n      const request = new NextRequest('http://localhost/api/users/onboarding', {\n        method: 'PUT',\n        body: JSON.stringify(onboardingData),\n      });\n\n      const response = await onboardingRoute(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n\n      // Verify RPM avatar was preserved\n      const user = await User.findById(testUserId);\n      expect(user?.avatar).toBe(rpmAvatar);\n    });\n  });\n\n  describe('Save Avatar API', () => {\n    beforeEach(() => {\n      mockedGetServerSession.mockResolvedValue({\n        user: { email: 'savetest@avatartest.com' }\n      } as any);\n    });\n\n    it('should save valid Ready Player Me avatar URL', async () => {\n      // Create user first\n      await User.create({\n        username: 'saveuser',\n        email: 'savetest@avatartest.com',\n        password: 'hashedpassword',\n        firstName: 'Save',\n        lastName: 'User',\n        avatar: 'old-avatar'\n      });\n\n      const avatarUrl = 'https://models.readyplayer.me/64f123abc456def789.glb';\n      const request = new NextRequest('http://localhost/api/save-avatar', {\n        method: 'POST',\n        body: JSON.stringify({ avatarUrl }),\n      });\n\n      const response = await saveAvatarRoute(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n      expect(data.avatarUrl).toBe(avatarUrl);\n\n      // Verify avatar was saved in database\n      const user = await User.findOne({ email: 'savetest@avatartest.com' });\n      expect(user?.avatar).toBe(avatarUrl);\n    });\n\n    it('should reject invalid avatar URLs', async () => {\n      const invalidUrls = [\n        'https://example.com/avatar.png',\n        'https://models.readyplayer.me/invalid',\n        'not-a-url',\n        ''\n      ];\n\n      for (const avatarUrl of invalidUrls) {\n        const request = new NextRequest('http://localhost/api/save-avatar', {\n          method: 'POST',\n          body: JSON.stringify({ avatarUrl }),\n        });\n\n        const response = await saveAvatarRoute(request);\n        const data = await response.json();\n\n        expect(response.status).toBe(400);\n        expect(data.success).toBeFalsy();\n      }\n    });\n\n    it('should require authentication', async () => {\n      mockedGetServerSession.mockResolvedValue(null);\n\n      const request = new NextRequest('http://localhost/api/save-avatar', {\n        method: 'POST',\n        body: JSON.stringify({ avatarUrl: 'https://models.readyplayer.me/test.glb' }),\n      });\n\n      const response = await saveAvatarRoute(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(401);\n      expect(data.error).toBe('Unauthorized');\n    });\n  });\n\n  describe('Avatar Display Integration', () => {\n    it('should handle both 3D (.glb) and 2D (.png) avatar formats', async () => {\n      const user = await User.create({\n        username: 'displayuser',\n        email: 'display@avatartest.com',\n        password: 'hashedpassword',\n        firstName: 'Display',\n        lastName: 'User',\n        avatar: 'https://models.readyplayer.me/64f123abc456def789.glb'\n      });\n\n      // Test that we can derive both formats\n      const glbUrl = user.avatar;\n      const pngUrl = glbUrl.replace('.glb', '.png');\n\n      expect(glbUrl).toContain('.glb');\n      expect(pngUrl).toContain('.png');\n      expect(pngUrl).toContain('models.readyplayer.me');\n    });\n\n    it('should maintain avatar consistency across user updates', async () => {\n      const initialAvatar = 'https://models.readyplayer.me/initial.glb';\n      \n      const user = await User.create({\n        username: 'consistentuser',\n        email: 'consistent@avatartest.com',\n        password: 'hashedpassword',\n        firstName: 'Consistent',\n        lastName: 'User',\n        avatar: initialAvatar\n      });\n\n      // Update user without changing avatar\n      user.bio = 'Updated bio';\n      await user.save();\n\n      // Avatar should remain unchanged\n      const updatedUser = await User.findById(user._id);\n      expect(updatedUser?.avatar).toBe(initialAvatar);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle missing avatar gracefully during onboarding', async () => {\n      const user = await User.create({\n        username: 'erroruser',\n        email: 'error@avatartest.com',\n        password: 'hashedpassword',\n        firstName: 'Error',\n        lastName: 'User'\n        // No avatar field\n      });\n\n      mockedGetServerSession.mockResolvedValue({\n        user: { id: user._id.toString(), email: 'error@avatartest.com' }\n      } as any);\n\n      const onboardingData = {\n        gender: 'male',\n        userType: 'developer',\n        bio: 'Test bio'\n      };\n\n      const request = new NextRequest('http://localhost/api/users/onboarding', {\n        method: 'PUT',\n        body: JSON.stringify(onboardingData),\n      });\n\n      const response = await onboardingRoute(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(200);\n      expect(data.success).toBe(true);\n\n      // Should have generated an avatar\n      const updatedUser = await User.findById(user._id);\n      expect(updatedUser?.avatar).toBeDefined();\n    });\n\n    it('should handle database errors gracefully', async () => {\n      // Mock a database error\n      const originalFindById = User.findById;\n      User.findById = jest.fn().mockRejectedValue(new Error('Database error'));\n\n      mockedGetServerSession.mockResolvedValue({\n        user: { id: 'invalid-id', email: 'test@avatartest.com' }\n      } as any);\n\n      const request = new NextRequest('http://localhost/api/users/onboarding', {\n        method: 'PUT',\n        body: JSON.stringify({ gender: 'male' }),\n      });\n\n      const response = await onboardingRoute(request);\n      const data = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(data.success).toBe(false);\n\n      // Restore original method\n      User.findById = originalFindById;\n    });\n  });\n});"],"version":3}