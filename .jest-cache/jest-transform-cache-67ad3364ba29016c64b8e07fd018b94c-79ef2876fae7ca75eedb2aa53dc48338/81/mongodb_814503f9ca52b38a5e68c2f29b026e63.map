{"file":"C:\\Users\\akdav\\Downloads\\devsocial\\__tests__\\setup\\mongodb.ts","mappings":";;;;;;;;;;;;;;;AAAA,iEAAyD;AACzD,wDAA+B;AAC/B,gDAAuB;AACvB,4CAAmB;AAEnB,IAAI,WAAW,GAA6B,IAAI,CAAA;AAEhD,oDAAoD;AACpD,OAAO,CAAC,GAAG,CAAC,oBAAoB,GAAG,cAAI,CAAC,IAAI,CAAC,YAAE,CAAC,OAAO,EAAE,EAAE,QAAQ,EAAE,kBAAkB,CAAC,CAAA;AACxF,OAAO,CAAC,GAAG,CAAC,eAAe,GAAG,OAAO,CAAA;AACrC,OAAO,CAAC,GAAG,CAAC,2BAA2B,GAAG,MAAM,CAAA;AAEzC,MAAM,YAAY,GAAG,GAAS,EAAE;IACrC,IAAI,WAAW;QAAE,OAAO,WAAW,CAAC,MAAM,EAAE,CAAA;IAE5C,WAAW,GAAG,MAAM,yCAAiB,CAAC,MAAM,CAAC;QAC3C,MAAM,EAAE;YACN,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,IAAI;YACb,WAAW,EAAE,cAAI,CAAC,IAAI,CAAC,YAAE,CAAC,OAAO,EAAE,EAAE,QAAQ,EAAE,kBAAkB,CAAC;SACnE;QACD,QAAQ,EAAE;YACR,MAAM,EAAE,MAAM;SACf;KACF,CAAC,CAAA;IAEF,MAAM,GAAG,GAAG,WAAW,CAAC,MAAM,EAAE,CAAA;IAChC,MAAM,kBAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA;IAC3B,OAAO,GAAG,CAAA;AACZ,CAAC,CAAA,CAAA;AAjBY,QAAA,YAAY,gBAiBxB;AAEM,MAAM,eAAe,GAAG,GAAS,EAAE;IACxC,IAAI,kBAAQ,CAAC,UAAU,CAAC,UAAU,KAAK,CAAC,EAAE,CAAC;QACzC,MAAM,kBAAQ,CAAC,UAAU,EAAE,CAAA;IAC7B,CAAC;IACD,IAAI,WAAW,EAAE,CAAC;QAChB,MAAM,WAAW,CAAC,IAAI,EAAE,CAAA;QACxB,WAAW,GAAG,IAAI,CAAA;IACpB,CAAC;AACH,CAAC,CAAA,CAAA;AARY,QAAA,eAAe,mBAQ3B;AAEM,MAAM,aAAa,GAAG,GAAS,EAAE;IACtC,IAAI,kBAAQ,CAAC,UAAU,CAAC,UAAU,KAAK,CAAC;QAAE,OAAM;IAEhD,MAAM,WAAW,GAAG,kBAAQ,CAAC,UAAU,CAAC,WAAW,CAAA;IACnD,KAAK,MAAM,GAAG,IAAI,WAAW,EAAE,CAAC;QAC9B,MAAM,WAAW,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,CAAA;IACvC,CAAC;AACH,CAAC,CAAA,CAAA;AAPY,QAAA,aAAa,iBAOzB","names":[],"sources":["C:\\Users\\akdav\\Downloads\\devsocial\\__tests__\\setup\\mongodb.ts"],"sourcesContent":["import { MongoMemoryServer } from 'mongodb-memory-server'\nimport mongoose from 'mongoose'\nimport path from 'path'\nimport os from 'os'\n\nlet mongoServer: MongoMemoryServer | null = null\n\n// Configure global settings to cache MongoDB binary\nprocess.env.MONGOMS_DOWNLOAD_DIR = path.join(os.homedir(), '.cache', 'mongodb-binaries')\nprocess.env.MONGOMS_VERSION = '6.0.4'\nprocess.env.MONGOMS_DISABLE_POSTINSTALL = 'true'\n\nexport const setupMongoDB = async () => {\n  if (mongoServer) return mongoServer.getUri()\n  \n  mongoServer = await MongoMemoryServer.create({\n    binary: {\n      version: '6.0.4',\n      skipMD5: true,\n      downloadDir: path.join(os.homedir(), '.cache', 'mongodb-binaries'),\n    },\n    instance: {\n      dbName: 'test',\n    },\n  })\n  \n  const uri = mongoServer.getUri()\n  await mongoose.connect(uri)\n  return uri\n}\n\nexport const teardownMongoDB = async () => {\n  if (mongoose.connection.readyState !== 0) {\n    await mongoose.disconnect()\n  }\n  if (mongoServer) {\n    await mongoServer.stop()\n    mongoServer = null\n  }\n}\n\nexport const clearDatabase = async () => {\n  if (mongoose.connection.readyState === 0) return\n  \n  const collections = mongoose.connection.collections\n  for (const key in collections) {\n    await collections[key].deleteMany({})\n  }\n}"],"version":3}