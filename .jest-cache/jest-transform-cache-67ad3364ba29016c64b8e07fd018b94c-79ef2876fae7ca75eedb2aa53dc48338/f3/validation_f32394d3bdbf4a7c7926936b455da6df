5933970bf2754eab4a36fb9f09f1e672
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createReportSchema = exports.updateProfileSchema = exports.createCommentSchema = exports.createPostSchema = exports.loginSchema = exports.signupSchema = void 0;
const zod_1 = require("zod");
// Auth validation schemas
exports.signupSchema = zod_1.z.object({
    username: zod_1.z
        .string()
        .min(3, "Username must be at least 3 characters")
        .max(30, "Username must be less than 30 characters")
        .regex(/^[a-zA-Z0-9_]+$/, "Username can only contain letters, numbers, and underscores"),
    email: zod_1.z.string().email("Invalid email address"),
    password: zod_1.z
        .string()
        .min(8, "Password must be at least 8 characters")
        .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/, "Password must contain at least one uppercase letter, one lowercase letter, and one number"),
    firstName: zod_1.z.string().min(1, "First name is required").max(50, "First name must be less than 50 characters"),
    lastName: zod_1.z.string().min(1, "Last name is required").max(50, "Last name must be less than 50 characters"),
    birthMonth: zod_1.z.number().min(1).max(12),
    birthDay: zod_1.z.number().min(1).max(31),
    // Accept any string for affiliation to accommodate the large dynamic list
    affiliation: zod_1.z.string().max(100).optional(),
});
exports.loginSchema = zod_1.z.object({
    usernameOrEmail: zod_1.z.string().min(1, "Username or email is required"),
    password: zod_1.z.string().min(1, "Password is required"),
});
// Post validation schemas
exports.createPostSchema = zod_1.z.object({
    content: zod_1.z.string().min(1, "Content is required").max(2000, "Content must be less than 2000 characters"),
    isAnonymous: zod_1.z.boolean().optional().default(false),
    imageUrl: zod_1.z.string().url().optional().nullable(),
    tags: zod_1.z.array(zod_1.z.string().max(50)).max(5, "Maximum 5 tags allowed").optional().default([]),
});
// Comment validation schemas
exports.createCommentSchema = zod_1.z.object({
    content: zod_1.z.string().min(1, "Content is required").max(500, "Content must be less than 500 characters"),
});
// User profile validation schemas
exports.updateProfileSchema = zod_1.z.object({
    bio: zod_1.z.string().max(250, "Bio must be less than 250 characters").optional(),
    // Allow any string for affiliation here as well
    affiliation: zod_1.z.string().max(100).optional(),
    avatar: zod_1.z.string().url().optional(),
});
// Report validation schemas
exports.createReportSchema = zod_1.z.object({
    reportedItemType: zod_1.z.enum(["post", "comment"]),
    reportedItemId: zod_1.z.string().min(1, "Reported item ID is required"),
    reason: zod_1.z.string().min(1, "Reason is required").max(500, "Reason must be less than 500 characters"),
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxha2RhdlxcRG93bmxvYWRzXFxkZXZzb2NpYWxcXHV0aWxzXFx2YWxpZGF0aW9uLnRzIiwibWFwcGluZ3MiOiI7OztBQUFBLDZCQUF1QjtBQUV2QiwwQkFBMEI7QUFDYixRQUFBLFlBQVksR0FBRyxPQUFDLENBQUMsTUFBTSxDQUFDO0lBQ25DLFFBQVEsRUFBRSxPQUFDO1NBQ1IsTUFBTSxFQUFFO1NBQ1IsR0FBRyxDQUFDLENBQUMsRUFBRSx3Q0FBd0MsQ0FBQztTQUNoRCxHQUFHLENBQUMsRUFBRSxFQUFFLDBDQUEwQyxDQUFDO1NBQ25ELEtBQUssQ0FBQyxpQkFBaUIsRUFBRSw2REFBNkQsQ0FBQztJQUMxRixLQUFLLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQztJQUNoRCxRQUFRLEVBQUUsT0FBQztTQUNSLE1BQU0sRUFBRTtTQUNSLEdBQUcsQ0FBQyxDQUFDLEVBQUUsd0NBQXdDLENBQUM7U0FDaEQsS0FBSyxDQUNKLGlDQUFpQyxFQUNqQywyRkFBMkYsQ0FDNUY7SUFDSCxTQUFTLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsd0JBQXdCLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLDRDQUE0QyxDQUFDO0lBQzVHLFFBQVEsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSx1QkFBdUIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsMkNBQTJDLENBQUM7SUFDekcsVUFBVSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztJQUNyQyxRQUFRLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO0lBQ25DLDBFQUEwRTtJQUMxRSxXQUFXLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUU7Q0FDNUMsQ0FBQyxDQUFBO0FBRVcsUUFBQSxXQUFXLEdBQUcsT0FBQyxDQUFDLE1BQU0sQ0FBQztJQUNsQyxlQUFlLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsK0JBQStCLENBQUM7SUFDbkUsUUFBUSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLHNCQUFzQixDQUFDO0NBQ3BELENBQUMsQ0FBQTtBQUVGLDBCQUEwQjtBQUNiLFFBQUEsZ0JBQWdCLEdBQUcsT0FBQyxDQUFDLE1BQU0sQ0FBQztJQUN2QyxPQUFPLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUscUJBQXFCLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLDJDQUEyQyxDQUFDO0lBQ3hHLFdBQVcsRUFBRSxPQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUNsRCxRQUFRLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsRUFBRTtJQUNoRCxJQUFJLEVBQUUsT0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSx3QkFBd0IsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7Q0FDMUYsQ0FBQyxDQUFBO0FBRUYsNkJBQTZCO0FBQ2hCLFFBQUEsbUJBQW1CLEdBQUcsT0FBQyxDQUFDLE1BQU0sQ0FBQztJQUMxQyxPQUFPLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUscUJBQXFCLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLDBDQUEwQyxDQUFDO0NBQ3ZHLENBQUMsQ0FBQTtBQUVGLGtDQUFrQztBQUNyQixRQUFBLG1CQUFtQixHQUFHLE9BQUMsQ0FBQyxNQUFNLENBQUM7SUFDMUMsR0FBRyxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLHNDQUFzQyxDQUFDLENBQUMsUUFBUSxFQUFFO0lBQzNFLGdEQUFnRDtJQUNoRCxXQUFXLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUU7SUFDM0MsTUFBTSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLEVBQUU7Q0FDcEMsQ0FBQyxDQUFBO0FBRUYsNEJBQTRCO0FBQ2YsUUFBQSxrQkFBa0IsR0FBRyxPQUFDLENBQUMsTUFBTSxDQUFDO0lBQ3pDLGdCQUFnQixFQUFFLE9BQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDN0MsY0FBYyxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLDhCQUE4QixDQUFDO0lBQ2pFLE1BQU0sRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUseUNBQXlDLENBQUM7Q0FDcEcsQ0FBQyxDQUFBIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcYWtkYXZcXERvd25sb2Fkc1xcZGV2c29jaWFsXFx1dGlsc1xcdmFsaWRhdGlvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB6IH0gZnJvbSBcInpvZFwiXG5cbi8vIEF1dGggdmFsaWRhdGlvbiBzY2hlbWFzXG5leHBvcnQgY29uc3Qgc2lnbnVwU2NoZW1hID0gei5vYmplY3Qoe1xuICB1c2VybmFtZTogelxuICAgIC5zdHJpbmcoKVxuICAgIC5taW4oMywgXCJVc2VybmFtZSBtdXN0IGJlIGF0IGxlYXN0IDMgY2hhcmFjdGVyc1wiKVxuICAgIC5tYXgoMzAsIFwiVXNlcm5hbWUgbXVzdCBiZSBsZXNzIHRoYW4gMzAgY2hhcmFjdGVyc1wiKVxuICAgIC5yZWdleCgvXlthLXpBLVowLTlfXSskLywgXCJVc2VybmFtZSBjYW4gb25seSBjb250YWluIGxldHRlcnMsIG51bWJlcnMsIGFuZCB1bmRlcnNjb3Jlc1wiKSxcbiAgZW1haWw6IHouc3RyaW5nKCkuZW1haWwoXCJJbnZhbGlkIGVtYWlsIGFkZHJlc3NcIiksXG4gIHBhc3N3b3JkOiB6XG4gICAgLnN0cmluZygpXG4gICAgLm1pbig4LCBcIlBhc3N3b3JkIG11c3QgYmUgYXQgbGVhc3QgOCBjaGFyYWN0ZXJzXCIpXG4gICAgLnJlZ2V4KFxuICAgICAgL14oPz0uKlthLXpdKSg/PS4qW0EtWl0pKD89LipcXGQpLyxcbiAgICAgIFwiUGFzc3dvcmQgbXVzdCBjb250YWluIGF0IGxlYXN0IG9uZSB1cHBlcmNhc2UgbGV0dGVyLCBvbmUgbG93ZXJjYXNlIGxldHRlciwgYW5kIG9uZSBudW1iZXJcIixcbiAgICApLFxuICBmaXJzdE5hbWU6IHouc3RyaW5nKCkubWluKDEsIFwiRmlyc3QgbmFtZSBpcyByZXF1aXJlZFwiKS5tYXgoNTAsIFwiRmlyc3QgbmFtZSBtdXN0IGJlIGxlc3MgdGhhbiA1MCBjaGFyYWN0ZXJzXCIpLFxuICBsYXN0TmFtZTogei5zdHJpbmcoKS5taW4oMSwgXCJMYXN0IG5hbWUgaXMgcmVxdWlyZWRcIikubWF4KDUwLCBcIkxhc3QgbmFtZSBtdXN0IGJlIGxlc3MgdGhhbiA1MCBjaGFyYWN0ZXJzXCIpLFxuICBiaXJ0aE1vbnRoOiB6Lm51bWJlcigpLm1pbigxKS5tYXgoMTIpLFxuICBiaXJ0aERheTogei5udW1iZXIoKS5taW4oMSkubWF4KDMxKSxcbiAgLy8gQWNjZXB0IGFueSBzdHJpbmcgZm9yIGFmZmlsaWF0aW9uIHRvIGFjY29tbW9kYXRlIHRoZSBsYXJnZSBkeW5hbWljIGxpc3RcbiAgYWZmaWxpYXRpb246IHouc3RyaW5nKCkubWF4KDEwMCkub3B0aW9uYWwoKSxcbn0pXG5cbmV4cG9ydCBjb25zdCBsb2dpblNjaGVtYSA9IHoub2JqZWN0KHtcbiAgdXNlcm5hbWVPckVtYWlsOiB6LnN0cmluZygpLm1pbigxLCBcIlVzZXJuYW1lIG9yIGVtYWlsIGlzIHJlcXVpcmVkXCIpLFxuICBwYXNzd29yZDogei5zdHJpbmcoKS5taW4oMSwgXCJQYXNzd29yZCBpcyByZXF1aXJlZFwiKSxcbn0pXG5cbi8vIFBvc3QgdmFsaWRhdGlvbiBzY2hlbWFzXG5leHBvcnQgY29uc3QgY3JlYXRlUG9zdFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgY29udGVudDogei5zdHJpbmcoKS5taW4oMSwgXCJDb250ZW50IGlzIHJlcXVpcmVkXCIpLm1heCgyMDAwLCBcIkNvbnRlbnQgbXVzdCBiZSBsZXNzIHRoYW4gMjAwMCBjaGFyYWN0ZXJzXCIpLFxuICBpc0Fub255bW91czogei5ib29sZWFuKCkub3B0aW9uYWwoKS5kZWZhdWx0KGZhbHNlKSxcbiAgaW1hZ2VVcmw6IHouc3RyaW5nKCkudXJsKCkub3B0aW9uYWwoKS5udWxsYWJsZSgpLFxuICB0YWdzOiB6LmFycmF5KHouc3RyaW5nKCkubWF4KDUwKSkubWF4KDUsIFwiTWF4aW11bSA1IHRhZ3MgYWxsb3dlZFwiKS5vcHRpb25hbCgpLmRlZmF1bHQoW10pLFxufSlcblxuLy8gQ29tbWVudCB2YWxpZGF0aW9uIHNjaGVtYXNcbmV4cG9ydCBjb25zdCBjcmVhdGVDb21tZW50U2NoZW1hID0gei5vYmplY3Qoe1xuICBjb250ZW50OiB6LnN0cmluZygpLm1pbigxLCBcIkNvbnRlbnQgaXMgcmVxdWlyZWRcIikubWF4KDUwMCwgXCJDb250ZW50IG11c3QgYmUgbGVzcyB0aGFuIDUwMCBjaGFyYWN0ZXJzXCIpLFxufSlcblxuLy8gVXNlciBwcm9maWxlIHZhbGlkYXRpb24gc2NoZW1hc1xuZXhwb3J0IGNvbnN0IHVwZGF0ZVByb2ZpbGVTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGJpbzogei5zdHJpbmcoKS5tYXgoMjUwLCBcIkJpbyBtdXN0IGJlIGxlc3MgdGhhbiAyNTAgY2hhcmFjdGVyc1wiKS5vcHRpb25hbCgpLFxuICAvLyBBbGxvdyBhbnkgc3RyaW5nIGZvciBhZmZpbGlhdGlvbiBoZXJlIGFzIHdlbGxcbiAgYWZmaWxpYXRpb246IHouc3RyaW5nKCkubWF4KDEwMCkub3B0aW9uYWwoKSxcbiAgYXZhdGFyOiB6LnN0cmluZygpLnVybCgpLm9wdGlvbmFsKCksXG59KVxuXG4vLyBSZXBvcnQgdmFsaWRhdGlvbiBzY2hlbWFzXG5leHBvcnQgY29uc3QgY3JlYXRlUmVwb3J0U2NoZW1hID0gei5vYmplY3Qoe1xuICByZXBvcnRlZEl0ZW1UeXBlOiB6LmVudW0oW1wicG9zdFwiLCBcImNvbW1lbnRcIl0pLFxuICByZXBvcnRlZEl0ZW1JZDogei5zdHJpbmcoKS5taW4oMSwgXCJSZXBvcnRlZCBpdGVtIElEIGlzIHJlcXVpcmVkXCIpLFxuICByZWFzb246IHouc3RyaW5nKCkubWluKDEsIFwiUmVhc29uIGlzIHJlcXVpcmVkXCIpLm1heCg1MDAsIFwiUmVhc29uIG11c3QgYmUgbGVzcyB0aGFuIDUwMCBjaGFyYWN0ZXJzXCIpLFxufSlcbiJdLCJ2ZXJzaW9uIjozfQ==