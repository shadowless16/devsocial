{"file":"C:\\Users\\akdav\\Downloads\\devsocial\\app\\api\\users\\onboarding\\route.ts","mappings":"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","names":[],"sources":["C:\\Users\\akdav\\Downloads\\devsocial\\app\\api\\users\\onboarding\\route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\"\nimport { getServerSession } from \"next-auth\"\nimport { authOptions } from \"@/lib/auth\"\nimport connectDB from \"@/lib/db\"\nimport User from \"@/models/User\"\nimport { generateGenderAvatar } from \"@/utils/avatar-generator\"\n\nexport const dynamic = 'force-dynamic'\n\nexport async function PUT(req: NextRequest) {\n  try {\n    await connectDB()\n    \n    const session = await getServerSession(authOptions)\n    if (!session?.user?.id) {\n      return NextResponse.json({ success: false, error: \"Unauthorized\" }, { status: 401 })\n    }\n\n    const body = await req.json()\n    const { gender, userType, bio, techStack, experienceLevel, githubUsername, linkedinUrl, portfolioUrl, avatar } = body\n\n    const user = await User.findById(session.user.id)\n    if (!user) {\n      return NextResponse.json({ success: false, error: \"User not found\" }, { status: 404 })\n    }\n\n    // Update user fields\n    if (gender) user.gender = gender\n    if (userType) user.userType = userType\n    if (bio) user.bio = bio\n    if (techStack) user.techStack = techStack\n    if (experienceLevel) user.experienceLevel = experienceLevel\n    if (githubUsername) user.githubUsername = githubUsername\n    if (linkedinUrl) user.linkedinUrl = linkedinUrl\n    if (portfolioUrl) user.portfolioUrl = portfolioUrl\n\n    // Update avatar if provided (from RPM), otherwise generate gender-specific avatar\n    if (avatar) {\n      user.avatar = avatar\n    } else if (gender && !user.avatar.includes('readyplayer.me')) {\n      user.avatar = generateGenderAvatar(gender)\n    }\n\n    // Mark onboarding as completed\n    user.onboardingCompleted = true\n\n    await user.save()\n\n    return NextResponse.json({\n      success: true,\n      data: { user: user.toObject() }\n    })\n  } catch (error) {\n    console.error(\"Onboarding error:\", error)\n    return NextResponse.json({ success: false, error: \"Internal server error\" }, { status: 500 })\n  }\n}"],"version":3}