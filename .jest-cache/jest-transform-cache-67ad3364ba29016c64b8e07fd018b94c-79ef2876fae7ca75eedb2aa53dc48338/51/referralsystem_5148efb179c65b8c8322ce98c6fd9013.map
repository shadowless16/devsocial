{"file":"C:\\Users\\akdav\\Downloads\\devsocial\\utils\\referral-system.ts","mappings":";;;;;;;;;;;;;;;AAAA,iEAAwC;AACxC,yDAAgC;AAChC,mEAA0C;AAC1C,uCAAmC;AAGnC,MAAa,cAAc;IACzB,MAAM,CAAO,eAAe,CAAC,MAAc;;YACzC,MAAM,IAAI,GAAG,MAAM,cAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;YACxC,IAAI,CAAC,IAAI;gBAAE,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAA;YAE5C,2CAA2C;YAC3C,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;gBACvB,wEAAwE;gBACxE,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAA;gBACzC,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,CAAA;gBAC5D,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,CAAA;gBACvE,IAAI,CAAC,YAAY,GAAG,GAAG,QAAQ,GAAG,SAAS,GAAG,MAAM,EAAE,CAAA;gBACtD,MAAM,IAAI,CAAC,IAAI,EAAE,CAAA;YACnB,CAAC;YAED,OAAO,IAAI,CAAC,YAAY,CAAA;QAC1B,CAAC;KAAA;IAED,MAAM,CAAO,cAAc,CAAC,UAAkB,EAAE,cAAsB;;YACpE,4DAA4D;YAE5D,mCAAmC;YACnC,MAAM,gBAAgB,GAAG,MAAM,kBAAQ,CAAC,OAAO,CAAC;gBAC9C,QAAQ,EAAE,UAAU;gBACpB,QAAQ,EAAE,cAAc;aACzB,CAAC,CAAA;YAEF,IAAI,gBAAgB,EAAE,CAAC;gBACrB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAA;YAC5C,CAAC;YAED,mCAAmC;YACnC,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAA;YAE3D,yCAAyC;YACzC,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAA;YAC5B,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAA;YAE3C,MAAM,QAAQ,GAAG,IAAI,kBAAQ,CAAC;gBAC5B,QAAQ,EAAE,UAAU;gBACpB,QAAQ,EAAE,cAAc;gBACxB,YAAY;gBACZ,SAAS;gBACT,MAAM,EAAE,SAAS;aAClB,CAAC,CAAA;YAEF,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;YACrB,OAAO,QAAQ,CAAA;QACjB,CAAC;KAAA;IAED,MAAM,CAAO,uBAAuB,CAAC,MAAc;;YACjD,4DAA4D;YAE5D,uCAAuC;YACvC,MAAM,gBAAgB,GAAG,MAAM,kBAAQ,CAAC,IAAI,CAAC;gBAC3C,QAAQ,EAAE,MAAM;gBAChB,MAAM,EAAE,SAAS;gBACjB,SAAS,EAAE,EAAE,GAAG,EAAE,IAAI,IAAI,EAAE,EAAE,EAAE,mCAAmC;aACpE,CAAC,CAAA;YAEF,KAAK,MAAM,QAAQ,IAAI,gBAAgB,EAAE,CAAC;gBACxC,IAAI,CAAC;oBACH,MAAM,IAAI,GAAG,MAAM,cAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;oBACxC,IAAI,CAAC,IAAI;wBAAE,SAAQ;oBAEnB,0BAA0B;oBAC1B,IAAI,SAAS,GAAG,MAAM,mBAAS,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,CAAA;oBACzD,IAAI,CAAC,SAAS,EAAE,CAAC;wBACf,SAAS,GAAG,MAAM,mBAAS,CAAC,MAAM,CAAC;4BACjC,IAAI,EAAE,MAAM;4BACZ,UAAU,EAAE,CAAC;4BACb,OAAO,EAAE,IAAI,CAAC,MAAM,IAAI,CAAC;4BACzB,cAAc,EAAE,CAAC;yBAClB,CAAC,CAAA;oBACJ,CAAC;oBAED,gEAAgE;oBAChE,MAAM,kBAAkB,GAAG,SAAS,CAAC,UAAU,IAAI,CAAC,IAAI,SAAS,CAAC,OAAO,IAAI,EAAE,CAAA;oBAE/E,IAAI,kBAAkB,EAAE,CAAC;wBACvB,6BAA6B;wBAC7B,QAAQ,CAAC,MAAM,GAAG,WAAW,CAAA;wBAC7B,QAAQ,CAAC,WAAW,GAAG,IAAI,IAAI,EAAE,CAAA;wBACjC,QAAQ,CAAC,cAAc,GAAG,IAAI,CAAA;wBAC9B,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;wBAErB,yBAAyB;wBACzB,MAAM,IAAA,iBAAO,EAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,kBAAkB,EAAE,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAA;wBACxF,MAAM,IAAA,iBAAO,EAAC,MAAM,EAAE,gBAAgB,EAAE,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAA;wBAEhE,wBAAwB;wBACxB,MAAM,mBAAS,CAAC,gBAAgB,CAC9B,EAAE,IAAI,EAAE,QAAQ,CAAC,QAAQ,EAAE,EAC3B,EAAE,IAAI,EAAE,EAAE,cAAc,EAAE,CAAC,EAAE,EAAE,EAC/B,EAAE,MAAM,EAAE,IAAI,EAAE,CACjB,CAAA;oBACH,CAAC;gBACH,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,OAAO,CAAC,KAAK,CAAC,4CAA4C,MAAM,GAAG,EAAE,KAAK,CAAC,CAAA;oBAC3E,gCAAgC;gBAClC,CAAC;YACH,CAAC;QACH,CAAC;KAAA;IAED,MAAM,CAAO,gBAAgB,CAAC,MAAc;;YAC1C,4DAA4D;YAE5D,kEAAkE;YAClE,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAA;YAErC,MAAM,YAAY,GAAG,IAAI,cAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;YACzD,MAAM,KAAK,GAAG,MAAM,kBAAQ,CAAC,SAAS,CAAC;gBACrC,EAAE,MAAM,EAAE,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAE;gBACtC;oBACE,MAAM,EAAE;wBACN,GAAG,EAAE,SAAS;wBACd,KAAK,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE;wBAClB,YAAY,EAAE,EAAE,IAAI,EAAE,iBAAiB,EAAE;qBAC1C;iBACF;aACF,CAAC,CAAA;YAEF,MAAM,eAAe,GAAG,MAAM,kBAAQ,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,YAAY,EAAE,CAAC;iBACpE,QAAQ,CAAC,UAAU,EAAE,6BAA6B,CAAC;iBACnD,IAAI,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC;iBACvB,KAAK,CAAC,EAAE,CAAC,CAAA;YAEZ,OAAO;gBACL,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;oBAChC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC,YAAY,EAAE,CAAA;oBACjE,OAAO,GAAG,CAAA;gBACZ,CAAC,EAAE,EAAE,CAAC;gBACN,eAAe;aAChB,CAAA;QACH,CAAC;KAAA;IAED,MAAM,CAAO,kBAAkB;;YAC7B,4DAA4D;YAE5D,MAAM,kBAAQ,CAAC,UAAU,CACvB;gBACE,MAAM,EAAE,SAAS;gBACjB,SAAS,EAAE,EAAE,GAAG,EAAE,IAAI,IAAI,EAAE,EAAE;aAC/B,EACD,EAAE,MAAM,EAAE,SAAS,EAAE,CACtB,CAAA;QACH,CAAC;KAAA;IAED,MAAM,CAAO,kBAAkB,CAAC,UAAkB;;YAChD,4DAA4D;YAE5D,2CAA2C;YAC3C,MAAM,gBAAgB,GAAG,MAAM,kBAAQ,CAAC,IAAI,CAAC;gBAC3C,QAAQ,EAAE,UAAU;gBACpB,MAAM,EAAE,SAAS;gBACjB,SAAS,EAAE,EAAE,GAAG,EAAE,IAAI,IAAI,EAAE,EAAE;aAC/B,CAAC,CAAC,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,CAAA;YAE9B,KAAK,MAAM,QAAQ,IAAI,gBAAgB,EAAE,CAAC;gBACxC,IAAI,CAAC;oBACH,MAAM,YAAY,GAAG,MAAM,cAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAA;oBAC/D,IAAI,CAAC,YAAY;wBAAE,SAAQ;oBAE3B,0BAA0B;oBAC1B,IAAI,SAAS,GAAG,MAAM,mBAAS,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,QAAQ,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAA;oBACxE,IAAI,CAAC,SAAS,EAAE,CAAC;wBACf,SAAS,GAAG,MAAM,mBAAS,CAAC,MAAM,CAAC;4BACjC,IAAI,EAAE,QAAQ,CAAC,QAAQ,CAAC,GAAG;4BAC3B,UAAU,EAAE,CAAC;4BACb,OAAO,EAAE,YAAY,CAAC,MAAM,IAAI,CAAC;4BACjC,cAAc,EAAE,CAAC;yBAClB,CAAC,CAAA;oBACJ,CAAC;oBAED,uDAAuD;oBACvD,IAAI,SAAS,CAAC,UAAU,IAAI,CAAC,IAAI,SAAS,CAAC,OAAO,IAAI,EAAE,EAAE,CAAC;wBACzD,yBAAyB;wBACzB,QAAQ,CAAC,MAAM,GAAG,WAAW,CAAA;wBAC7B,QAAQ,CAAC,WAAW,GAAG,IAAI,IAAI,EAAE,CAAA;wBACjC,QAAQ,CAAC,cAAc,GAAG,IAAI,CAAA;wBAC9B,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAA;wBAErB,yBAAyB;wBACzB,MAAM,IAAA,iBAAO,EAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,kBAAkB,EAAE,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAA;wBACxF,MAAM,IAAA,iBAAO,EAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,gBAAgB,EAAE,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAA;wBAE1F,0CAA0C;wBAC1C,MAAM,mBAAS,CAAC,gBAAgB,CAC9B,EAAE,IAAI,EAAE,QAAQ,CAAC,QAAQ,EAAE,EAC3B,EAAE,IAAI,EAAE,EAAE,cAAc,EAAE,CAAC,EAAE,EAAE,EAC/B,EAAE,MAAM,EAAE,IAAI,EAAE,CACjB,CAAA;oBACH,CAAC;gBACH,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,OAAO,CAAC,KAAK,CAAC,6BAA6B,QAAQ,CAAC,GAAG,GAAG,EAAE,KAAK,CAAC,CAAA;gBACpE,CAAC;YACH,CAAC;QACH,CAAC;KAAA;CACF;AAtMD,wCAsMC","names":[],"sources":["C:\\Users\\akdav\\Downloads\\devsocial\\utils\\referral-system.ts"],"sourcesContent":["import Referral from \"@/models/Referral\"\nimport User from \"@/models/User\"\nimport UserStats from \"@/models/UserStats\"\nimport { awardXP } from \"./awardXP\"\nimport connectDB from \"@/lib/db\"\n\nexport class ReferralSystem {\n  static async getReferralCode(userId: string): Promise<string> {\n    const user = await User.findById(userId)\n    if (!user) throw new Error(\"User not found\")\n\n    // Return the user's existing referral code\n    if (!user.referralCode) {\n      // Generate one if somehow missing (shouldn't happen with pre-save hook)\n      const timestamp = Date.now().toString(36)\n      const username = user.username.substring(0, 4).toUpperCase()\n      const random = Math.random().toString(36).substring(2, 6).toUpperCase()\n      user.referralCode = `${username}${timestamp}${random}`\n      await user.save()\n    }\n\n    return user.referralCode\n  }\n\n  static async createReferral(referrerId: string, referredUserId: string): Promise<any> {\n    // connectDB() // Remove in tests, connection already exists\n\n    // Check if referral already exists\n    const existingReferral = await Referral.findOne({\n      referrer: referrerId,\n      referred: referredUserId,\n    })\n\n    if (existingReferral) {\n      throw new Error(\"Referral already exists\")\n    }\n\n    // Get referrer's code for tracking\n    const referralCode = await this.getReferralCode(referrerId)\n\n    // Create referral with 30-day expiration\n    const expiresAt = new Date()\n    expiresAt.setDate(expiresAt.getDate() + 30)\n\n    const referral = new Referral({\n      referrer: referrerId,\n      referred: referredUserId,\n      referralCode,\n      expiresAt,\n      status: \"pending\",\n    })\n\n    await referral.save()\n    return referral\n  }\n\n  static async checkReferralCompletion(userId: string): Promise<void> {\n    // connectDB() // Remove in tests, connection already exists\n\n    // Find pending referrals for this user\n    const pendingReferrals = await Referral.find({\n      referred: userId,\n      status: \"pending\",\n      expiresAt: { $gt: new Date() }, // Only check non-expired referrals\n    })\n\n    for (const referral of pendingReferrals) {\n      try {\n        const user = await User.findById(userId)\n        if (!user) continue\n\n        // Ensure UserStats exists\n        let userStats = await UserStats.findOne({ user: userId })\n        if (!userStats) {\n          userStats = await UserStats.create({\n            user: userId,\n            totalPosts: 0,\n            totalXP: user.points || 0,\n            totalReferrals: 0\n          })\n        }\n\n        // Check completion criteria: user has at least 1 post and 50 XP\n        const hasMinimumActivity = userStats.totalPosts >= 1 && userStats.totalXP >= 50\n\n        if (hasMinimumActivity) {\n          // Mark referral as completed\n          referral.status = \"completed\"\n          referral.completedAt = new Date()\n          referral.rewardsClaimed = true\n          await referral.save()\n\n          // Award XP to both users\n          await awardXP(referral.referrer.toString(), \"referral_success\", referral._id.toString())\n          await awardXP(userId, \"referral_bonus\", referral._id.toString())\n\n          // Update referral stats\n          await UserStats.findOneAndUpdate(\n            { user: referral.referrer }, \n            { $inc: { totalReferrals: 1 } }, \n            { upsert: true }\n          )\n        }\n      } catch (error) {\n        console.error(`Error processing referral completion for ${userId}:`, error)\n        // Continue with other referrals\n      }\n    }\n  }\n\n  static async getReferralStats(userId: string): Promise<any> {\n    // connectDB() // Remove in tests, connection already exists\n\n    // First, check for any pending referrals that should be completed\n    await this.checkUserReferrals(userId)\n\n    const userObjectId = new User.base.Types.ObjectId(userId)\n    const stats = await Referral.aggregate([\n      { $match: { referrer: userObjectId } },\n      {\n        $group: {\n          _id: \"$status\",\n          count: { $sum: 1 },\n          totalRewards: { $sum: \"$referrerReward\" },\n        },\n      },\n    ])\n\n    const recentReferrals = await Referral.find({ referrer: userObjectId })\n      .populate(\"referred\", \"username displayName avatar\")\n      .sort({ createdAt: -1 })\n      .limit(10)\n\n    return {\n      stats: stats.reduce((acc, stat) => {\n        acc[stat._id] = { count: stat.count, rewards: stat.totalRewards }\n        return acc\n      }, {}),\n      recentReferrals,\n    }\n  }\n\n  static async expireOldReferrals(): Promise<void> {\n    // connectDB() // Remove in tests, connection already exists\n\n    await Referral.updateMany(\n      {\n        status: \"pending\",\n        expiresAt: { $lt: new Date() },\n      },\n      { status: \"expired\" },\n    )\n  }\n\n  static async checkUserReferrals(referrerId: string): Promise<void> {\n    // connectDB() // Remove in tests, connection already exists\n\n    // Find pending referrals for this referrer\n    const pendingReferrals = await Referral.find({\n      referrer: referrerId,\n      status: \"pending\",\n      expiresAt: { $gt: new Date() },\n    }).populate(\"referred\", \"_id\")\n\n    for (const referral of pendingReferrals) {\n      try {\n        const referredUser = await User.findById(referral.referred._id)\n        if (!referredUser) continue\n\n        // Ensure UserStats exists\n        let userStats = await UserStats.findOne({ user: referral.referred._id })\n        if (!userStats) {\n          userStats = await UserStats.create({\n            user: referral.referred._id,\n            totalPosts: 0,\n            totalXP: referredUser.points || 0,\n            totalReferrals: 0\n          })\n        }\n\n        // Check completion criteria: at least 1 post and 50 XP\n        if (userStats.totalPosts >= 1 && userStats.totalXP >= 50) {\n          // Update referral status\n          referral.status = \"completed\"\n          referral.completedAt = new Date()\n          referral.rewardsClaimed = true\n          await referral.save()\n\n          // Award XP to both users\n          await awardXP(referral.referrer.toString(), \"referral_success\", referral._id.toString())\n          await awardXP(referral.referred._id.toString(), \"referral_bonus\", referral._id.toString())\n\n          // Update referrer's total referrals count\n          await UserStats.findOneAndUpdate(\n            { user: referral.referrer },\n            { $inc: { totalReferrals: 1 } },\n            { upsert: true }\n          )\n        }\n      } catch (error) {\n        console.error(`Error processing referral ${referral._id}:`, error)\n      }\n    }\n  }\n}\n"],"version":3}