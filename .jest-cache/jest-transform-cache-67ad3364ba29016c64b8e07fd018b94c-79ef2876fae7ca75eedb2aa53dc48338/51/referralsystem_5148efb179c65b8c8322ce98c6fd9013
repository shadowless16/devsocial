b1d222bc916813c7135445c4bd188c96
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReferralSystem = void 0;
const Referral_1 = __importDefault(require("@/models/Referral"));
const User_1 = __importDefault(require("@/models/User"));
const UserStats_1 = __importDefault(require("@/models/UserStats"));
const awardXP_1 = require("./awardXP");
class ReferralSystem {
    static getReferralCode(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            const user = yield User_1.default.findById(userId);
            if (!user)
                throw new Error("User not found");
            // Return the user's existing referral code
            if (!user.referralCode) {
                // Generate one if somehow missing (shouldn't happen with pre-save hook)
                const timestamp = Date.now().toString(36);
                const username = user.username.substring(0, 4).toUpperCase();
                const random = Math.random().toString(36).substring(2, 6).toUpperCase();
                user.referralCode = `${username}${timestamp}${random}`;
                yield user.save();
            }
            return user.referralCode;
        });
    }
    static createReferral(referrerId, referredUserId) {
        return __awaiter(this, void 0, void 0, function* () {
            // connectDB() // Remove in tests, connection already exists
            // Check if referral already exists
            const existingReferral = yield Referral_1.default.findOne({
                referrer: referrerId,
                referred: referredUserId,
            });
            if (existingReferral) {
                throw new Error("Referral already exists");
            }
            // Get referrer's code for tracking
            const referralCode = yield this.getReferralCode(referrerId);
            // Create referral with 30-day expiration
            const expiresAt = new Date();
            expiresAt.setDate(expiresAt.getDate() + 30);
            const referral = new Referral_1.default({
                referrer: referrerId,
                referred: referredUserId,
                referralCode,
                expiresAt,
                status: "pending",
            });
            yield referral.save();
            return referral;
        });
    }
    static checkReferralCompletion(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            // connectDB() // Remove in tests, connection already exists
            // Find pending referrals for this user
            const pendingReferrals = yield Referral_1.default.find({
                referred: userId,
                status: "pending",
                expiresAt: { $gt: new Date() }, // Only check non-expired referrals
            });
            for (const referral of pendingReferrals) {
                try {
                    const user = yield User_1.default.findById(userId);
                    if (!user)
                        continue;
                    // Ensure UserStats exists
                    let userStats = yield UserStats_1.default.findOne({ user: userId });
                    if (!userStats) {
                        userStats = yield UserStats_1.default.create({
                            user: userId,
                            totalPosts: 0,
                            totalXP: user.points || 0,
                            totalReferrals: 0
                        });
                    }
                    // Check completion criteria: user has at least 1 post and 50 XP
                    const hasMinimumActivity = userStats.totalPosts >= 1 && userStats.totalXP >= 50;
                    if (hasMinimumActivity) {
                        // Mark referral as completed
                        referral.status = "completed";
                        referral.completedAt = new Date();
                        referral.rewardsClaimed = true;
                        yield referral.save();
                        // Award XP to both users
                        yield (0, awardXP_1.awardXP)(referral.referrer.toString(), "referral_success", referral._id.toString());
                        yield (0, awardXP_1.awardXP)(userId, "referral_bonus", referral._id.toString());
                        // Update referral stats
                        yield UserStats_1.default.findOneAndUpdate({ user: referral.referrer }, { $inc: { totalReferrals: 1 } }, { upsert: true });
                    }
                }
                catch (error) {
                    console.error(`Error processing referral completion for ${userId}:`, error);
                    // Continue with other referrals
                }
            }
        });
    }
    static getReferralStats(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            // connectDB() // Remove in tests, connection already exists
            // First, check for any pending referrals that should be completed
            yield this.checkUserReferrals(userId);
            const userObjectId = new User_1.default.base.Types.ObjectId(userId);
            const stats = yield Referral_1.default.aggregate([
                { $match: { referrer: userObjectId } },
                {
                    $group: {
                        _id: "$status",
                        count: { $sum: 1 },
                        totalRewards: { $sum: "$referrerReward" },
                    },
                },
            ]);
            const recentReferrals = yield Referral_1.default.find({ referrer: userObjectId })
                .populate("referred", "username displayName avatar")
                .sort({ createdAt: -1 })
                .limit(10);
            return {
                stats: stats.reduce((acc, stat) => {
                    acc[stat._id] = { count: stat.count, rewards: stat.totalRewards };
                    return acc;
                }, {}),
                recentReferrals,
            };
        });
    }
    static expireOldReferrals() {
        return __awaiter(this, void 0, void 0, function* () {
            // connectDB() // Remove in tests, connection already exists
            yield Referral_1.default.updateMany({
                status: "pending",
                expiresAt: { $lt: new Date() },
            }, { status: "expired" });
        });
    }
    static checkUserReferrals(referrerId) {
        return __awaiter(this, void 0, void 0, function* () {
            // connectDB() // Remove in tests, connection already exists
            // Find pending referrals for this referrer
            const pendingReferrals = yield Referral_1.default.find({
                referrer: referrerId,
                status: "pending",
                expiresAt: { $gt: new Date() },
            }).populate("referred", "_id");
            for (const referral of pendingReferrals) {
                try {
                    const referredUser = yield User_1.default.findById(referral.referred._id);
                    if (!referredUser)
                        continue;
                    // Ensure UserStats exists
                    let userStats = yield UserStats_1.default.findOne({ user: referral.referred._id });
                    if (!userStats) {
                        userStats = yield UserStats_1.default.create({
                            user: referral.referred._id,
                            totalPosts: 0,
                            totalXP: referredUser.points || 0,
                            totalReferrals: 0
                        });
                    }
                    // Check completion criteria: at least 1 post and 50 XP
                    if (userStats.totalPosts >= 1 && userStats.totalXP >= 50) {
                        // Update referral status
                        referral.status = "completed";
                        referral.completedAt = new Date();
                        referral.rewardsClaimed = true;
                        yield referral.save();
                        // Award XP to both users
                        yield (0, awardXP_1.awardXP)(referral.referrer.toString(), "referral_success", referral._id.toString());
                        yield (0, awardXP_1.awardXP)(referral.referred._id.toString(), "referral_bonus", referral._id.toString());
                        // Update referrer's total referrals count
                        yield UserStats_1.default.findOneAndUpdate({ user: referral.referrer }, { $inc: { totalReferrals: 1 } }, { upsert: true });
                    }
                }
                catch (error) {
                    console.error(`Error processing referral ${referral._id}:`, error);
                }
            }
        });
    }
}
exports.ReferralSystem = ReferralSystem;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,