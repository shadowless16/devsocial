8e71a2ff0d2edc109d6c2940694512f8
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock dependencies
globals_1.jest.mock('../../utils/awardXP', () => ({
    awardXP: globals_1.jest.fn().mockResolvedValue({ success: true })
}));
globals_1.jest.mock('../../utils/referral-system-fixed', () => ({
    ReferralSystemFixed: {
        processReferralFromSignup: globals_1.jest.fn().mockResolvedValue(true)
    }
}));
globals_1.jest.mock('../../models/Follow', () => ({
    create: globals_1.jest.fn().mockResolvedValue({})
}));
globals_1.jest.mock('next-auth', () => ({
    getServerSession: globals_1.jest.fn()
}));
const server_1 = require("next/server");
const mongoose_1 = __importDefault(require("mongoose"));
const User_1 = __importDefault(require("../../models/User"));
const route_1 = require("../../app/api/auth/signup/route");
const route_2 = require("../../app/api/users/onboarding/route");
const route_3 = require("../../app/api/save-avatar/route");
const next_auth_1 = require("next-auth");
const mockedGetServerSession = next_auth_1.getServerSession;
let testUserId;
(0, globals_1.beforeAll)(() => __awaiter(void 0, void 0, void 0, function* () {
    // Set test environment
    process.env.NODE_ENV = 'test';
    const testDbUri = process.env.MONGODB_TEST_URI || process.env.MONGODB_URI + '_test';
    // Only connect if not already connected
    if (mongoose_1.default.connection.readyState === 0) {
        yield mongoose_1.default.connect(testDbUri);
    }
}), 60000);
(0, globals_1.afterAll)(() => __awaiter(void 0, void 0, void 0, function* () {
    yield mongoose_1.default.disconnect();
}));
(0, globals_1.beforeEach)(() => __awaiter(void 0, void 0, void 0, function* () {
    // Clean up test data
    yield User_1.default.deleteMany({ email: { $regex: /@avatartest\.com$/ } });
    // Reset mocks
    mockedGetServerSession.mockReset();
}));
(0, globals_1.describe)('Avatar Creation During Signup Flow', () => {
    (0, globals_1.describe)('Initial Avatar Generation', () => {
        (0, globals_1.it)('should create user with initial avatar during signup', () => __awaiter(void 0, void 0, void 0, function* () {
            const signupData = {
                username: 'avataruser',
                email: 'avataruser@avatartest.com',
                password: 'Password123!',
                firstName: 'Avatar',
                lastName: 'User',
                birthMonth: 5,
                birthDay: 15,
                affiliation: 'Test University'
            };
            const request = new server_1.NextRequest('http://localhost/api/auth/signup', {
                method: 'POST',
                body: JSON.stringify(signupData),
            });
            const response = yield (0, route_1.POST)(request);
            const data = yield response.json();
            console.log('Response status:', response.status);
            console.log('Response data:', JSON.stringify(data, null, 2));
            (0, globals_1.expect)(response.status).toBe(201);
            (0, globals_1.expect)(data.success).toBe(true);
            (0, globals_1.expect)(data.data.user.avatar).toBeDefined();
            (0, globals_1.expect)(data.data.user.avatar).toContain('avataruser'); // Should contain username
            // Verify user was created in database with avatar
            const user = yield User_1.default.findOne({ email: signupData.email });
            (0, globals_1.expect)(user).toBeTruthy();
            (0, globals_1.expect)(user === null || user === void 0 ? void 0 : user.avatar).toBeDefined();
            (0, globals_1.expect)(user === null || user === void 0 ? void 0 : user.avatar).toBe(data.data.user.avatar);
            testUserId = user._id.toString();
        }));
        (0, globals_1.it)('should generate different avatars for different usernames', () => __awaiter(void 0, void 0, void 0, function* () {
            const users = [
                { username: 'user1', email: 'user1@avatartest.com' },
                { username: 'user2', email: 'user2@avatartest.com' }
            ];
            const avatars = [];
            for (const userData of users) {
                const signupData = Object.assign(Object.assign({}, userData), { password: 'Password123!', firstName: 'Test', lastName: 'User', birthMonth: 5, birthDay: 15, affiliation: 'Test University' });
                const request = new server_1.NextRequest('http://localhost/api/auth/signup', {
                    method: 'POST',
                    body: JSON.stringify(signupData),
                });
                const response = yield (0, route_1.POST)(request);
                const data = yield response.json();
                (0, globals_1.expect)(response.status).toBe(201);
                avatars.push(data.data.user.avatar);
            }
            // Avatars should be different
            (0, globals_1.expect)(avatars[0]).not.toBe(avatars[1]);
        }));
    });
    (0, globals_1.describe)('Avatar Update During Onboarding', () => {
        (0, globals_1.beforeEach)(() => __awaiter(void 0, void 0, void 0, function* () {
            // Create a test user first
            const user = yield User_1.default.create({
                username: 'onboardinguser',
                email: 'onboarding@avatartest.com',
                password: 'hashedpassword',
                firstName: 'Onboarding',
                lastName: 'User',
                birthMonth: 5,
                birthDay: 15,
                affiliation: 'Test University',
                avatar: 'initial-avatar-url'
            });
            testUserId = user._id.toString();
            // Mock session
            mockedGetServerSession.mockResolvedValue({
                user: { id: testUserId, email: 'onboarding@avatartest.com' }
            });
        }));
        (0, globals_1.it)('should update avatar with Ready Player Me URL during onboarding', () => __awaiter(void 0, void 0, void 0, function* () {
            const onboardingData = {
                gender: 'male',
                userType: 'developer',
                bio: 'Test bio',
                avatar: 'https://models.readyplayer.me/64f123abc456def789.glb'
            };
            const request = new server_1.NextRequest('http://localhost/api/users/onboarding', {
                method: 'PUT',
                body: JSON.stringify(onboardingData),
            });
            const response = yield (0, route_2.PUT)(request);
            const data = yield response.json();
            (0, globals_1.expect)(response.status).toBe(200);
            (0, globals_1.expect)(data.success).toBe(true);
            // Verify avatar was updated in database
            const user = yield User_1.default.findById(testUserId);
            (0, globals_1.expect)(user === null || user === void 0 ? void 0 : user.avatar).toBe(onboardingData.avatar);
            (0, globals_1.expect)(user === null || user === void 0 ? void 0 : user.onboardingCompleted).toBe(true);
        }));
        (0, globals_1.it)('should generate gender-specific avatar if no RPM avatar provided', () => __awaiter(void 0, void 0, void 0, function* () {
            const onboardingData = {
                gender: 'female',
                userType: 'designer',
                bio: 'Test bio'
                // No avatar provided
            };
            const request = new server_1.NextRequest('http://localhost/api/users/onboarding', {
                method: 'PUT',
                body: JSON.stringify(onboardingData),
            });
            const response = yield (0, route_2.PUT)(request);
            const data = yield response.json();
            (0, globals_1.expect)(response.status).toBe(200);
            (0, globals_1.expect)(data.success).toBe(true);
            // Verify gender-specific avatar was generated
            const user = yield User_1.default.findById(testUserId);
            (0, globals_1.expect)(user === null || user === void 0 ? void 0 : user.avatar).toBeDefined();
            (0, globals_1.expect)(user === null || user === void 0 ? void 0 : user.avatar).not.toBe('initial-avatar-url'); // Should be updated
            (0, globals_1.expect)(user === null || user === void 0 ? void 0 : user.gender).toBe('female');
        }));
        (0, globals_1.it)('should preserve RPM avatar over gender generation', () => __awaiter(void 0, void 0, void 0, function* () {
            const rpmAvatar = 'https://models.readyplayer.me/64f123abc456def789.glb';
            const onboardingData = {
                gender: 'male',
                userType: 'developer',
                bio: 'Test bio',
                avatar: rpmAvatar
            };
            const request = new server_1.NextRequest('http://localhost/api/users/onboarding', {
                method: 'PUT',
                body: JSON.stringify(onboardingData),
            });
            const response = yield (0, route_2.PUT)(request);
            const data = yield response.json();
            (0, globals_1.expect)(response.status).toBe(200);
            (0, globals_1.expect)(data.success).toBe(true);
            // Verify RPM avatar was preserved
            const user = yield User_1.default.findById(testUserId);
            (0, globals_1.expect)(user === null || user === void 0 ? void 0 : user.avatar).toBe(rpmAvatar);
        }));
    });
    (0, globals_1.describe)('Save Avatar API', () => {
        (0, globals_1.beforeEach)(() => {
            mockedGetServerSession.mockResolvedValue({
                user: { email: 'savetest@avatartest.com' }
            });
        });
        (0, globals_1.it)('should save valid Ready Player Me avatar URL', () => __awaiter(void 0, void 0, void 0, function* () {
            // Create user first
            yield User_1.default.create({
                username: 'saveuser',
                email: 'savetest@avatartest.com',
                password: 'hashedpassword',
                firstName: 'Save',
                lastName: 'User',
                avatar: 'old-avatar'
            });
            const avatarUrl = 'https://models.readyplayer.me/64f123abc456def789.glb';
            const request = new server_1.NextRequest('http://localhost/api/save-avatar', {
                method: 'POST',
                body: JSON.stringify({ avatarUrl }),
            });
            const response = yield (0, route_3.POST)(request);
            const data = yield response.json();
            (0, globals_1.expect)(response.status).toBe(200);
            (0, globals_1.expect)(data.success).toBe(true);
            (0, globals_1.expect)(data.avatarUrl).toBe(avatarUrl);
            // Verify avatar was saved in database
            const user = yield User_1.default.findOne({ email: 'savetest@avatartest.com' });
            (0, globals_1.expect)(user === null || user === void 0 ? void 0 : user.avatar).toBe(avatarUrl);
        }));
        (0, globals_1.it)('should reject invalid avatar URLs', () => __awaiter(void 0, void 0, void 0, function* () {
            const invalidUrls = [
                'https://example.com/avatar.png',
                'https://models.readyplayer.me/invalid',
                'not-a-url',
                ''
            ];
            for (const avatarUrl of invalidUrls) {
                const request = new server_1.NextRequest('http://localhost/api/save-avatar', {
                    method: 'POST',
                    body: JSON.stringify({ avatarUrl }),
                });
                const response = yield (0, route_3.POST)(request);
                const data = yield response.json();
                (0, globals_1.expect)(response.status).toBe(400);
                (0, globals_1.expect)(data.success).toBeFalsy();
            }
        }));
        (0, globals_1.it)('should require authentication', () => __awaiter(void 0, void 0, void 0, function* () {
            mockedGetServerSession.mockResolvedValue(null);
            const request = new server_1.NextRequest('http://localhost/api/save-avatar', {
                method: 'POST',
                body: JSON.stringify({ avatarUrl: 'https://models.readyplayer.me/test.glb' }),
            });
            const response = yield (0, route_3.POST)(request);
            const data = yield response.json();
            (0, globals_1.expect)(response.status).toBe(401);
            (0, globals_1.expect)(data.error).toBe('Unauthorized');
        }));
    });
    (0, globals_1.describe)('Avatar Display Integration', () => {
        (0, globals_1.it)('should handle both 3D (.glb) and 2D (.png) avatar formats', () => __awaiter(void 0, void 0, void 0, function* () {
            const user = yield User_1.default.create({
                username: 'displayuser',
                email: 'display@avatartest.com',
                password: 'hashedpassword',
                firstName: 'Display',
                lastName: 'User',
                avatar: 'https://models.readyplayer.me/64f123abc456def789.glb'
            });
            // Test that we can derive both formats
            const glbUrl = user.avatar;
            const pngUrl = glbUrl.replace('.glb', '.png');
            (0, globals_1.expect)(glbUrl).toContain('.glb');
            (0, globals_1.expect)(pngUrl).toContain('.png');
            (0, globals_1.expect)(pngUrl).toContain('models.readyplayer.me');
        }));
        (0, globals_1.it)('should maintain avatar consistency across user updates', () => __awaiter(void 0, void 0, void 0, function* () {
            const initialAvatar = 'https://models.readyplayer.me/initial.glb';
            const user = yield User_1.default.create({
                username: 'consistentuser',
                email: 'consistent@avatartest.com',
                password: 'hashedpassword',
                firstName: 'Consistent',
                lastName: 'User',
                avatar: initialAvatar
            });
            // Update user without changing avatar
            user.bio = 'Updated bio';
            yield user.save();
            // Avatar should remain unchanged
            const updatedUser = yield User_1.default.findById(user._id);
            (0, globals_1.expect)(updatedUser === null || updatedUser === void 0 ? void 0 : updatedUser.avatar).toBe(initialAvatar);
        }));
    });
    (0, globals_1.describe)('Error Handling', () => {
        (0, globals_1.it)('should handle missing avatar gracefully during onboarding', () => __awaiter(void 0, void 0, void 0, function* () {
            const user = yield User_1.default.create({
                username: 'erroruser',
                email: 'error@avatartest.com',
                password: 'hashedpassword',
                firstName: 'Error',
                lastName: 'User'
                // No avatar field
            });
            mockedGetServerSession.mockResolvedValue({
                user: { id: user._id.toString(), email: 'error@avatartest.com' }
            });
            const onboardingData = {
                gender: 'male',
                userType: 'developer',
                bio: 'Test bio'
            };
            const request = new server_1.NextRequest('http://localhost/api/users/onboarding', {
                method: 'PUT',
                body: JSON.stringify(onboardingData),
            });
            const response = yield (0, route_2.PUT)(request);
            const data = yield response.json();
            (0, globals_1.expect)(response.status).toBe(200);
            (0, globals_1.expect)(data.success).toBe(true);
            // Should have generated an avatar
            const updatedUser = yield User_1.default.findById(user._id);
            (0, globals_1.expect)(updatedUser === null || updatedUser === void 0 ? void 0 : updatedUser.avatar).toBeDefined();
        }));
        (0, globals_1.it)('should handle database errors gracefully', () => __awaiter(void 0, void 0, void 0, function* () {
            // Mock a database error
            const originalFindById = User_1.default.findById;
            User_1.default.findById = globals_1.jest.fn().mockRejectedValue(new Error('Database error'));
            mockedGetServerSession.mockResolvedValue({
                user: { id: 'invalid-id', email: 'test@avatartest.com' }
            });
            const request = new server_1.NextRequest('http://localhost/api/users/onboarding', {
                method: 'PUT',
                body: JSON.stringify({ gender: 'male' }),
            });
            const response = yield (0, route_2.PUT)(request);
            const data = yield response.json();
            (0, globals_1.expect)(response.status).toBe(500);
            (0, globals_1.expect)(data.success).toBe(false);
            // Restore original method
            User_1.default.findById = originalFindById;
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,